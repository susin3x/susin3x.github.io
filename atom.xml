<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Susin3x&#39;s Blog</title>
  <icon>https://susin3x.cn/icon.png</icon>
  
  <link href="https://susin3x.cn/atom.xml" rel="self"/>
  
  <link href="https://susin3x.cn/"/>
  <updated>2023-05-19T07:26:08.177Z</updated>
  <id>https://susin3x.cn/</id>
  
  <author>
    <name>susin3x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小米笔记本Pro15.6蓝屏——重装系统，拆机清灰加固态</title>
    <link href="https://susin3x.cn/posts/fdfe12a3.html"/>
    <id>https://susin3x.cn/posts/fdfe12a3.html</id>
    <published>2023-05-18T08:59:00.000Z</published>
    <updated>2023-05-19T07:26:08.177Z</updated>
    
    <content type="html"><![CDATA[<p>我的蓝屏摸索解决过程如下，下次就可以跟帖解决了 ╮(╯_╰)╭ ，18年双十一买的这台小米笔记本，买回来之后没有清过灰，这次拆机顺便还加了一条固态硬盘，记录一下，免得下次忘记咋弄了。。</p><p><img data-src="https://img.susin3x.cn//images/202305181048710.jpg"></p><p>从<span class="exturl" data-url="aHR0cDovL3d3dy53aW4xMHpqLm5ldC93aW4xMGppYW9jaGVuZy8xMjkyOC5odG1s">蓝屏代码大全<i class="fa fa-external-link-alt"></i></span>找到上图的蓝屏代码，写得很模糊，也不知道具体是哪里出问题了。</p><div class="note info simple">            <p>此BSOD表示发生了致命的硬件错误。使用Windows硬件错误体系结构(WHEA)提供的错误数据。BSOD错误代码0x00000124也可能在同一蓝色屏幕上显示<br><font color = red>“WHEA_UNCORRECTABLE_ERROR”</font>。</p>          </div><p>跟着这个<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUo4NHkxcDdieS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTViNWZkNTFlYzljN2YyYTcwZWYxNDhmYTE2OTljMDYx">up主<i class="fa fa-external-link-alt"></i></span>排查蓝屏导致的问题，先排除软件方面上的问题，再排除硬件。因为没有收集到蓝屏日志文件，所以也没法判断是普通软件出问题，还是系统出问题了。于是先装个纯净的系统，看是否是系统出问题了（PS：重装能解决99%的问题，重买能解决100%的问题･֊･ ）。</p><h2 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h2><p>重装系统有两个蛮有用的视频：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVNLNDExbjdYaS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTViNWZkNTFlYzljN2YyYTcwZWYxNDhmYTE2OTljMDYx">【装机教程】三种方法，手把手教你重装系统！_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMURKNDExRDc5eS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTViNWZkNTFlYzljN2YyYTcwZWYxNDhmYTE2OTljMDYx">【装机教程】超详细WIN10系统安装教程，官方ISO直装与PE两种方法教程_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p><h3 id="方法一-系统U盘安装"><a href="#方法一-系统U盘安装" class="headerlink" title="方法一(系统U盘安装)"></a>方法一(系统U盘安装)</h3><p>先去<span class="exturl" data-url="aHR0cHM6Ly9tc2RuLml0ZWxseW91LmNuLw==">MSDN<i class="fa fa-external-link-alt"></i></span>下载win10 1909版本的系统镜像，也可以去<span class="exturl" data-url="aHR0cHM6Ly9uZXh0Lml0ZWxseW91LmNuL09yaWdpbmFsL0luZGV4">MSDN新站<i class="fa fa-external-link-alt"></i></span>下载更高版本的系统镜像，我准备下个专业版，选商业版和零售版都OK，复制ed2k链接去迅雷下载就行了。</p><p><img data-src="https://img.susin3x.cn//images/202305181552366.png"></p><p>下载<span class="exturl" data-url="aHR0cDovL3J1ZnVzLmllL3poLw==">rufus<i class="fa fa-external-link-alt"></i></span>，这个下载链接我找了好久，实在是不好找啊，下载后即开即用，无需安装。</p><p><img data-src="https://img.susin3x.cn//images/202305181607846.png"></p><p>选择刚才下载的系统镜像，其他选项默认即可，点击开始，将系统镜像刻录到U盘。</p><p><img data-src="https://img.susin3x.cn//images/202305181617641.png"></p><p>刻录完成后，<font color = red><strong>重启电脑</strong></font>，在开机前一直连按F12(小米笔记本开机快速启动项的快捷键是F12)。</p><p><img data-src="https://img.susin3x.cn//images/202305181730362.jpg"></p><p>选择下面的<font color = red><strong>EFI USB Device</strong></font>启动项后，回车就进入系统安装的界面了。<font color = red>先提前备份好重要数据</font>，分区的时候最好先<font color  = red><strong>删除</strong></font>所有分区，因为重做系统还会创建新的分区，然后再重新分区。</p><h3 id="方法二-PE安装"><a href="#方法二-PE安装" class="headerlink" title="方法二(PE安装)"></a>方法二(PE安装)</h3><p>下载<span class="exturl" data-url="aHR0cHM6Ly93d3cud2VwZS5jb20uY24vZG93bmxvYWQuaHRtbA==">微PE<i class="fa fa-external-link-alt"></i></span>后，双击微PE安装程序，在右下角选择安装到U盘。</p><p><img data-src="https://img.susin3x.cn//images/202305181745927.png"></p><p>格式改为NTFS，给U盘重命名为微PE工具箱，勾选“包含DOS工具箱”和“个性化盘符图标”。</p><p><img data-src="https://img.susin3x.cn//images/202305181745893.png"></p><p>将PE安装进U盘后，打开名为“微PE工具箱”的U盘，将下载好的系统镜像<strong>复制</strong>到U盘。</p><p><img data-src="https://img.susin3x.cn//images/202305181838466.png"></p><p>复制完成后，<font color = red><strong>重启电脑</strong></font>，在开机前一直连按F12(小米笔记本开机快速启动项的快捷键是F12)。</p><p><img data-src="https://img.susin3x.cn//images/202305181730362.jpg"></p><p>选择下面的<font color = red><strong>EFI USB Device</strong></font>启动项后，回车就进入PE系统界面了，打开桌面的驱动精灵，进行磁盘分区，在要安装系统的磁盘上右键选择“删除所有分区”，左上角点击“保存更改”。</p><p><img data-src="https://img.susin3x.cn//images/202305181923416.jpg"></p><p>在要安装系统的磁盘上右键选择“快速分区”，根据自己的需要进行分区，C盘推荐分出60G到100G的空间，<font color = red><strong>注意一定要勾选上“对齐分区到此扇区数的整数倍”</strong></font>。这就是固态硬盘的4K对齐，不勾上的话，不仅会损失固态硬盘的性能，还会降低固态硬盘的使用寿命。点击“确定”，完成分区。</p><p><img data-src="https://img.susin3x.cn//images/202305181935313.png"></p><p>点击桌面的此电脑，打开名为“微PE工具箱”的U盘，打开系统镜像所在目录，右键所要安装的系统镜像，点击“装载”，双击“setup.exe”，就进入系统安装的界面了。在分区界面选择将系统安装到之前分好区的80G的C盘中，等待win10安装程序自动走完流程。之后会进入win10初始化的主界面，进行基本设置，网络设置和账户设置后，win10系统就安装成功了🎉🎉🎉。</p><p><img data-src="https://img.susin3x.cn//images/202305181949265.png"></p><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>win10系统安装成功后，要补齐各个硬件的驱动程序，进入<span class="exturl" data-url="aHR0cHM6Ly93d3cubWkuY29tL3NlcnZpY2Uvbm90ZWJvb2svZHJpdmVycw==">小米驱动下载官网<i class="fa fa-external-link-alt"></i></span>，输入SN的前5位数字（前五位数字代表笔记本型号）：<font color = red><strong>16773</strong></font>（小米笔记本Pro15.6的型号），下载驱动整合包。</p><p><img data-src="https://img.susin3x.cn//images/202305182010668.png"></p><p>安装好驱动整合包中所有的驱动即可。</p><p><img data-src="https://img.susin3x.cn//images/202305182015622.png"></p><h3 id="外设驱动"><a href="#外设驱动" class="headerlink" title="外设驱动"></a>外设驱动</h3><p>去<span class="exturl" data-url="aHR0cHM6Ly9jbi52YXJtaWxvLmNvbS9rZXlib2FyZHByb3NjZW5pdW0vc3VwcG9ydA==">varmilo机械键盘<i class="fa fa-external-link-alt"></i></span>下载驱动，输入型号“VA87M”，下载说明书和驱动。双击ISPTool.exe文件，点击“OPEN”，上传“ONLY-WINDOWS-KB-20180614-BB13H.MTP”文件后，点击“PROGRAM”，驱动安装成功后，软件界面会出现<strong>DisConnect Bootloader！</strong></p><p><img data-src="https://img.susin3x.cn//images/202305191139558.png"></p><h2 id="硬件检测"><a href="#硬件检测" class="headerlink" title="硬件检测"></a>硬件检测</h2><p>在重装系统并且安装好驱动之后，依然出现蓝屏现象，蓝屏重启可能是CPU，内存或者硬盘出现问题。</p><p><img data-src="https://img.susin3x.cn//images/202305182037024.jpg"></p><p>用AIDA64检测硬件故障，打开AIDA64，点击上方的“工具”，选择“系统稳定性测试”，选择所要测试的硬件，点击“Start”开始进行压力测试。如果电脑硬件有故障的话，是没有办法通过压力测试的，必然就会报错，报错会在状态栏弹出一个<font color = red>红条</font>的错误提示，同时压力测试会被中断。如果一时半会测不出来，跑个5到10分钟左右就可以了，点击“Stop”停止压力测试。不要进行太长时间的压力测试，毕竟满负荷的工作还是很伤电脑的。通过AIDA64可以粗略地测一下硬件是否有故障。</p><p><img data-src="https://img.susin3x.cn//images/202305182037793.png"></p><p><img data-src="https://img.susin3x.cn//images/202305182048835.png"></p><p><img data-src="https://img.susin3x.cn//images/202305182049524.png"></p><p><img data-src="https://img.susin3x.cn//images/202305182049707.png"></p><p><img data-src="https://img.susin3x.cn//images/202305182049909.png"></p><p>使用windows内存诊断工具检测内存，无异常。</p><p><img data-src="https://img.susin3x.cn//images/202305182057602.jpg"></p><p>使用CrystalDiskInfo和AS SSD检测固态硬盘，无异常。</p><p><img data-src="https://img.susin3x.cn//images/202305182057427.jpg"></p><p><img data-src="https://img.susin3x.cn//images/202305182057712.jpg"></p><p>没啥硬件问题，就是一直抛出<font color =red>“CPU过热”</font>，于是决定拆机清灰涂硅脂。</p><h2 id="拆机清灰"><a href="#拆机清灰" class="headerlink" title="拆机清灰"></a>拆机清灰</h2><p>拆机清灰有两个蛮有用的视频：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1VNHkxZTdHMy8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljayZ2ZF9zb3VyY2U9NWI1ZmQ1MWVjOWM3ZjJhNzBlZjE0OGZhMTY5OWMwNjE=">小米笔记本Pro15.6拆机清灰详细图解_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXhMNDExcDdUQi8/c3BtX2lkX2Zyb209MzMzLjEwMDcudG9wX3JpZ2h0X2Jhcl93aW5kb3dfY3VzdG9tX2NvbGxlY3Rpb24uY29udGVudC5jbGljayZ2ZF9zb3VyY2U9NWI1ZmQ1MWVjOWM3ZjJhNzBlZjE0OGZhMTY5OWMwNjE=">小米笔记本Pro15.6拆机清灰_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p><h3 id="拆机准备"><a href="#拆机准备" class="headerlink" title="拆机准备"></a>拆机准备</h3><p><strong>螺丝刀：</strong>十字形2.0 * 25mm，六角形T5 * 25mm（某多多￥6）</p><p><strong>清灰工具：</strong>【毛刷，三角翘片，撬棒，皮吹】（某宝￥7），实测翘片和撬棒要弄很久，可能吸盘好用一些，但还是要注意不要“大力出奇迹”，把后盖整变形了就很尬尴了。</p><p><strong>硅脂：</strong>利民TF8（硅脂选择推荐：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVRZNDExSDdTQy8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smdmRfc291cmNlPTViNWZkNTFlYzljN2YyYTcwZWYxNDhmYTE2OTljMDYx">18款散热硅脂大横评！看看哪个是YYDS！_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span>）</p><p><img data-src="https://img.susin3x.cn//images/202305182112650.png"></p><p>从测评结果来看，利民TF7和信越7921都挺不错的。但信越7921是分装售卖的，很难买到真货，而且也很难涂抹均匀，对新手小白不友好。我还是选择了利民TF8（京东自营1.2g花了￥24.9😄）。</p><p><strong>固态硬盘：</strong>三星980 | NVME | PCLE3.0 | 500G（某东￥269）</p><p>固态硬盘选择推荐如下，B站和知乎有很多视频和帖子是关于固态硬盘推荐的，可以多看看之后再选购。本来我想着支持国产的致态TiPlus5000(512G的￥259)，但固态大厂三星的980和TiPlus5000差不多价格，果断心动了~，至于0E事件，时不时监控一下固态硬盘的状况，应该就没啥大问题吧。</p><p><img data-src="https://img.susin3x.cn//images/202305182132471.jpg"></p><h3 id="清灰"><a href="#清灰" class="headerlink" title="清灰"></a>清灰</h3><p>首先拆后盖螺丝，然后用三角翘片和硬卡片撬开后盖。</p><p><img data-src="https://img.susin3x.cn//images/202305182144949.png"></p><p>内部结构如下，先断总电源，左风扇和右风扇电源，断电之后防静电：按住电源键20秒以上。</p><p><img data-src="https://img.susin3x.cn//images/202305182146252.jpg"></p><p>先拆下左风扇，用十字螺丝刀取下螺丝，打开风扇外盖，用毛刷扫干净风扇上的灰。</p><p><img data-src="https://img.susin3x.cn//images/202305182153375.png"></p><p>左风扇（已清灰）和右风扇（未清灰）对比如下：</p><p><img data-src="https://img.susin3x.cn//images/202305182157153.jpg"></p><h3 id="涂硅脂（未完成）"><a href="#涂硅脂（未完成）" class="headerlink" title="涂硅脂（未完成）"></a><font color = red>涂硅脂（未完成）</font></h3><p>因为我的失误，CPU盖子上的三个螺丝（1号，3号和5号）被我拧滑丝了😓，所以没法拆下CPU盖子和右风扇（右风扇和CPU盖子连在一起，所以右风扇只能原地清灰了），也无法换硅脂了。</p><p><img data-src="https://img.susin3x.cn//images/202305182204758.jpg"></p><p>过段时间看看还有没有兴致，买个工具把滑丝的螺丝拧下来，等后续。。</p><h3 id="加装固态硬盘"><a href="#加装固态硬盘" class="headerlink" title="加装固态硬盘"></a>加装固态硬盘</h3><p>我把原装的固态硬盘插到了扩展槽，三星980插在了原装槽。</p><p><img data-src="https://img.susin3x.cn//images/202305182210980.jpg"></p><p>装好固态硬盘之后，右键“此电脑”，选择“管理”，点击“磁盘管理”，右键磁盘1，选择“新建简单卷”，点击下一步就行了。500G我分了两个区，D盘用来放各种软件，E盘用来放各种文件。</p><p><img data-src="https://img.susin3x.cn//images/202305182218115.png"></p><p><img data-src="https://img.susin3x.cn//images/202305182222892.jpg" alt="原装固态硬盘测速"></p><p><img data-src="https://img.susin3x.cn//images/202305182222692.jpg" alt="三星980固态硬盘测速"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从5月12日拆机清灰，到现在为止，还没有出现蓝屏现象Ꮚ°ꈊ°;Ꮚ，高兴啊高兴，下次再涂硅脂吧~</p>]]></content>
    
    
    <summary type="html">最近电脑频繁蓝屏，蓝屏代码是WHEA_UNCORRECTABLE_ERROR(0x00000124)。因为进度一直卡在0%，就没有收集到蓝屏日志文件，于是决定重装系统，但重装后依然蓝屏。用AIDA64大体检测是否有硬件故障，CPU，硬盘和内存都没啥问题，就是一直报CPU过热，应该是要清灰涂硅脂了。</summary>
    
    
    
    <category term="学习分享" scheme="https://susin3x.cn/categories/%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="重装系统" scheme="https://susin3x.cn/tags/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="拆机清灰" scheme="https://susin3x.cn/tags/%E6%8B%86%E6%9C%BA%E6%B8%85%E7%81%B0/"/>
    
  </entry>
  
  <entry>
    <title>在阿里云服务器上部署一个flask项目</title>
    <link href="https://susin3x.cn/posts/36c70eb9.html"/>
    <id>https://susin3x.cn/posts/36c70eb9.html</id>
    <published>2022-03-01T12:20:10.000Z</published>
    <updated>2023-05-14T03:11:00.830Z</updated>
    
    <content type="html"><![CDATA[<p>部署flask项目时，通常都是使用WSGI应用服务器搭配Nginx作为反向代理实现的。常用的WSGI服务器有gunicorn和uwsgi，本项目将使用Nginx反向代理搭配gunicorn实现flask项目的部署。</p><h2 id="python3安装"><a href="#python3安装" class="headerlink" title="python3安装"></a>python3安装</h2><p>centos7原本就安装了Python2，而且不能被删除，因为可能有程序如yum依赖python2环境。</p><p><img data-src="https://img.susin3x.cn/images/202203071848524.png"></p><p>输入python命令，查看可知centos7自带的是python2.7.5版本。输入“which python”可以查看python所在的位置，一般是位于/usr/bin/python目录下。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# which python</span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><p>下面介绍安装python3的方法</p><ul><li>首先安装依赖包</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMv">下载<i class="fa fa-external-link-alt"></i></span>python3安装包，在/usr/local目录下新建一个python3目录，将安装包上传到 /usr/local/python3 目录后解压</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# <span class="built_in">mkdir</span> /usr/local/python3</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# <span class="built_in">cd</span> /usr/local/python3</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# tar -xvf Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span>.tar.xz</span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# <span class="built_in">cd</span> Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span></span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# ./configure --prefix=/usr/local/python3</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>创建软连接</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span>]# ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">报错：</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span>]# ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class="line"><span class="function">ln: <span class="title">failed</span> <span class="title">to</span> <span class="title">create</span> <span class="title">symbolic</span> <span class="title">link</span> ‘/<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">python3</span>’: <span class="title">File</span> <span class="title">exists</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">解决方法：<span class="title">ln</span> -<span class="title">s</span> 加一个 <span class="title">f</span> 即可</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">iZf8zi7rsmqdun3dyxb7cfZ</span> <span class="title">Python</span>-3.6.2]# <span class="title">ln</span> -<span class="title">sf</span> /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">python3</span>/<span class="title">bin</span>/<span class="title">python3</span> /<span class="title">usr</span>/<span class="title">bin</span>/<span class="title">python3</span></span></span><br></pre></td></tr></table></figure><ul><li>将/usr/local/python3/bin加入PATH</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># vim ~/.bash_profile</span><br><span class="line"># .bash_profile</span><br><span class="line"># Get the aliases and functions</span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; then</span><br><span class="line">. ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"><span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$HOME/bin:/usr/local/python3/bin</span><br><span class="line">export <span class="built_in">PATH</span></span><br></pre></td></tr></table></figure><ul><li>按ESC输入:wq回车退出，修改完执行下面的命令，让上一步的修改生效</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span>]# source ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>检查python3及pip3是否正常可用，如果输出版本号就成功啦</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span>]# python3 -V</span><br><span class="line">Python <span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span></span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">2</span>]# pip3 -V</span><br><span class="line">pip <span class="number">9</span>.<span class="number">0</span>.<span class="number">1</span> from /usr/local/python3/lib/python3.<span class="number">6</span>/site-packages (python <span class="number">3</span>.<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="pip3安装（可不装）"><a href="#pip3安装（可不装）" class="headerlink" title="pip3安装（可不装）"></a>pip3安装（可不装）</h3><p>丰富的第三方库是python的优势所在，为了更加方便的安装第三方库，使用pip命令，我们需要进行相应的安装。</p><ul><li>安装pip前需要前置安装<span class="exturl" data-url="aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcGFja2FnZXMvc291cmNlL3Mvc2V0dXB0b29scy9zZXR1cHRvb2xzLTE5LjYudGFyLmd6I21kNT1jNjA3ZGQxMThlYWU2ODJjNDRlZDE0NjM2N2ExN2UyNg==">setuptools<i class="fa fa-external-link-alt"></i></span></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# <span class="built_in">mkdir</span> setuptools</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# <span class="built_in">cd</span> setuptools</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ setuptools]# ls</span><br><span class="line">setuptools-<span class="number">19</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ setuptools]# tar -xvf setuptools-<span class="number">19</span>.<span class="number">6</span>.tar.gz</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ setuptools]# <span class="built_in">cd</span> setuptools-<span class="number">19</span>.<span class="number">6</span></span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ setuptools-<span class="number">19</span>.<span class="number">6</span>]# python3 setup.py build</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ setuptools-<span class="number">19</span>.<span class="number">6</span>]# python3 setup.py install</span><br></pre></td></tr></table></figure><ul><li>安装<span class="exturl" data-url="aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcGFja2FnZXMvc291cmNlL3AvcGlwL3BpcC04LjAuMi50YXIuZ3ojbWQ1PTNhNzNjNDE4OGY4ZGJhZDZhMWU2ZjZkNDRkMTE3ZWVi">pip<i class="fa fa-external-link-alt"></i></span></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# <span class="built_in">mkdir</span> pip3</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ python3]# <span class="built_in">cd</span> pip3</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pip3]# ls</span><br><span class="line">pip-<span class="number">8</span>.<span class="number">0</span>.<span class="number">2</span>.tar.gz</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pip3]# tar -xvf pip-<span class="number">8</span>.<span class="number">0</span>.<span class="number">2</span>.tar.gz</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pip3]# <span class="built_in">cd</span> pip-<span class="number">8</span>.<span class="number">0</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h2><p>开放3306端口和5000端口： 进入阿里云控制台  –&gt;  点击云服务器ECS  –&gt;  点击左侧的安全组  –&gt;  点击创建安全组 </p><p><img data-src="https://img.susin3x.cn/images/202203081556807.png"></p><p>​    选择入方向，手动添加3306端口和5000端口</p><p><img data-src="https://img.susin3x.cn/images/202203081636566.png"></p><h3 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h3><p><img data-src="https://img.susin3x.cn/images/202203081539379.png"></p><h3 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h3><p>在做毕设项目的时候，我把所有的疫情数据都放到了本地MySQL数据库中，要完成项目的部署，得把本地数据库中的数据上传到服务器的数据库中。前提：我的服务器已经装了MySQL；可使用宝塔面板进行操作，也可在终端输入命令。</p><ul><li>导出本地数据库sql文件</li></ul><p><img data-src="https://img.susin3x.cn/images/202203081528237.png"></p><ul><li>进入宝塔面板，点击数据库  – &gt;  添加数据库  –&gt;  输入数据库名</li></ul><p><img data-src="https://img.susin3x.cn/images/202203081515815.png"></p><ul><li>点击导入</li></ul><p><img data-src="https://img.susin3x.cn/images/202203081519907.png"></p><ul><li>本地上传sql文件</li></ul><p><img data-src="https://img.susin3x.cn/images/202203081540156.png"></p><ul><li>导入成功</li></ul><p><img data-src="https://img.susin3x.cn/images/202203081540825.png"></p><h4 id="linux中mysql常用命令"><a href="#linux中mysql常用命令" class="headerlink" title="linux中mysql常用命令"></a>linux中mysql常用命令</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">启动mysql服务:</span><br><span class="line">service mysqld <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line">查看mysql运行状态：</span><br><span class="line">service mysqld status</span><br><span class="line"></span><br><span class="line">查看mysql的运行使用的进程</span><br><span class="line">ps -ef |grep mysql</span><br><span class="line"></span><br><span class="line">登录本机mysql数据库：</span><br><span class="line">mysql -u root -p   </span><br><span class="line">--&gt;enter:输入密码</span><br><span class="line"></span><br><span class="line">停止mysql服务:</span><br><span class="line">service mysqld stop</span><br><span class="line"></span><br><span class="line">重启mysql服务:</span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="Nginx简述"><a href="#Nginx简述" class="headerlink" title="Nginx简述"></a>Nginx简述</h2><p>Nginx 是高性能的 HTTP 和反向代理的服务器，处理高并发能力是十分强大的，能经受高负载的考验,有报告表明Nginx能支持高达 50,000 个并发连接数。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>正向代理指在客户端（浏览器）配置代理服务器，通过代理服务器进行指定网站访问。</p><p><img data-src="https://img.susin3x.cn/images/202203061857543.webp" alt="正向代理"></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p><p><img data-src="https://img.susin3x.cn/images/202203061857450.webp" alt="反向代理"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p><p><img data-src="https://img.susin3x.cn/images/202203062038303.webp" alt="负载均衡"></p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，从而降低原来单个服务器的压力。</p><p><img data-src="https://img.susin3x.cn/images/202203062100683.png" alt="动静分离"> </p><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><h3 id="安装pcre依赖"><a href="#安装pcre依赖" class="headerlink" title="安装pcre依赖"></a>安装pcre依赖</h3><ul><li>进入 src 目录，联网下载 pcre 安装包依赖 </li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# <span class="built_in">cd</span> /usr/src</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ src]# wget http://downloads.sourceforge.<span class="built_in">net</span>/project/pcre/pcre/<span class="number">8</span>.<span class="number">37</span>/pcre-<span class="number">8</span>.<span class="number">37</span>.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压 pcre 安装包</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ src]# tar -xvf pcre-<span class="number">8</span>.<span class="number">37</span>.tar.gz</span><br></pre></td></tr></table></figure><ul><li>进入 pcre 解压后的文件目录</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ src]# <span class="built_in">cd</span> pcre-<span class="number">8</span>.<span class="number">37</span></span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pcre-<span class="number">8</span>.<span class="number">37</span>]# ./configure</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pcre-<span class="number">8</span>.<span class="number">37</span>]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>查看 pcre 版本</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pcre-<span class="number">8</span>.<span class="number">37</span>]# pcre-config --version</span><br></pre></td></tr></table></figure><h3 id="安装其他依赖"><a href="#安装其他依赖" class="headerlink" title="安装其他依赖"></a>安装其他依赖</h3><p>安装openssl 、zlib、gcc依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ pcre-<span class="number">8</span>.<span class="number">37</span>]# yum -y install make zlib zlib-devel gcc-c++ libtool    openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><ul><li>先开放80端口：进入阿里云控制台  –&gt;  点击云服务器ECS  –&gt;  点击左侧的安全组  –&gt;  点击创建安全组 </li></ul><p><img data-src="https://img.susin3x.cn/images/202203081556807.png"></p><p>​    选择入方向，手动添加80端口</p><p><img data-src="https://img.susin3x.cn/images/202203081559788.png"></p><ul><li>将 nginx-1.12.2.tar.gz 安装包上传到 src 目录后解压，也可以去<span class="exturl" data-url="aHR0cHM6Ly9uZ2lueC5vcmcvZG93bmxvYWQv">下载<i class="fa fa-external-link-alt"></i></span>想要的 Nginx 安装包</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ src]# ls</span><br><span class="line">nginx-<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span>.tar.gz  pcre-<span class="number">8</span>.<span class="number">37</span>  pcre-<span class="number">8</span>.<span class="number">37</span>.tar.gz</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ src]# tar -xvf nginx-<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span>.tar.gz</span><br></pre></td></tr></table></figure><ul><li>进入 Nginx 解压后的文件目录</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ src]# <span class="built_in">cd</span> nginx-<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ nginx-<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span>]# ./configure</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ nginx-<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span>]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>Nginx 安装成功后在 usr/local/ 目录下会多一个 nginx 目录</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ local]# ls</span><br><span class="line">aegis  bttomcat  games    lib64     man      sbin   webserver</span><br><span class="line">bin    curl      include  libexec   nginx    share  zend</span><br><span class="line">btjdk  etc       lib      libiconv  openssl  src</span><br></pre></td></tr></table></figure><ul><li>在 nginx 目录下的 sbin 目录有启动脚本</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ local]# <span class="built_in">cd</span> nginx</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ nginx]# ls</span><br><span class="line">conf  html  logs  sbin</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ nginx]# <span class="built_in">cd</span> sbin</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ls</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>启动 nginx，查看进程</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ./nginx</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ps -ef | grep nginx</span><br><span class="line">root      <span class="number">6511</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">57</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: master process ./nginx</span><br><span class="line">nobody    <span class="number">6512</span>  <span class="number">6511</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">57</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line">root      <span class="number">6529</span>  <span class="number">6405</span>  <span class="number">0</span> <span class="number">13</span>:<span class="number">58</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --<span class="built_in">color</span>=auto nginx</span><br></pre></td></tr></table></figure><ul><li>访问公网地址47.113.197.40，nginx终于安装成功啦✿✿ヽ(°▽°)ノ✿</li></ul><p><img data-src="https://img.susin3x.cn/images/202203071413692.png"></p><h3 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h3><p>使用nginx操作命令前提条件：必须进入nginx的目录（/usr/local/nginx/sbin）</p><ul><li>查看nginx的版本号</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">12</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>启动nginx</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ./nginx</span><br></pre></td></tr></table></figure><ul><li>停止nginx，进程没啦</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ./nginx -s stop</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ps -ef | grep nginx</span><br><span class="line">root      <span class="number">6804</span>  <span class="number">6405</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">23</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --<span class="built_in">color</span>=auto nginx</span><br></pre></td></tr></table></figure><ul><li>重新加载nginx</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">问题：</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# ./nginx -s reload</span><br><span class="line"><span class="function">nginx: [<span class="title">error</span>] <span class="title">open</span>() &quot;/<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">logs</span>/<span class="title">nginx.pid</span>&quot; <span class="title">failed</span> (2: <span class="title">No</span> <span class="title">such</span> <span class="title">file</span> <span class="title">or</span> <span class="title">directory</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">解决方法：</span></span><br><span class="line"><span class="function">[<span class="title">root</span>@<span class="title">iZf8zi7rsmqdun3dyxb7cfZ</span> <span class="title">sbin</span>]# /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">sbin</span>/<span class="title">nginx</span> -<span class="title">c</span> /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">nginx</span>/<span class="title">conf</span>/<span class="title">nginx.conf</span></span></span><br></pre></td></tr></table></figure><ul><li>杀死进程</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ sbin]# kill -<span class="number">9</span> <span class="number">6511</span>(进程号)</span><br></pre></td></tr></table></figure><h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h3><h4 id="nginx配置文件位置"><a href="#nginx配置文件位置" class="headerlink" title="nginx配置文件位置"></a>nginx配置文件位置</h4><p><img data-src="https://img.susin3x.cn/images/202203071504099.png"></p><h4 id="nginx配置文件组成"><a href="#nginx配置文件组成" class="headerlink" title="nginx配置文件组成"></a>nginx配置文件组成</h4><p>第一部分：全局块</p><p> 从配置文件开始到  events  块之间的内容，会设置一些影响 Nginx  服务器整体运行的配置指令，主要包括配置运行  Nginx  服务器的用户（组）、允许生成的  worker process  数，进程  PID  存放路径、日志存放路径和类型以及配置文件的引入等。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p> 这是  Nginx  服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约。</p><p>第二部分：events块</p><p> events  块涉及的指令主要影响  Nginx  服务器与用户的网络连接，常用的设置包括是否开启对多  work process 下的网络连接序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个  word process  可以同时支持的最大连接数等。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_connections  <span class="number">1024</span>;</span><br></pre></td></tr></table></figure><p> 如上代码表示每个  work process  支持的最大连接数为  1024。</p><p>第三部分：http块</p><p>这算是  Nginx  服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。需要注意的是：http  块也可以包括 http 全局块、server  块。 </p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>记得修改完配置文件，需要重新加载一下配置文件~</p><p><img data-src="https://img.susin3x.cn/images/202203081548328.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# /usr/local/nginx/sbin/nginx -s reload     //重新加载</span><br></pre></td></tr></table></figure><h2 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h2><ul><li>安装gunicorn</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ ~]# pip3 install gunicorn</span><br></pre></td></tr></table></figure><ul><li>启动gunicorn</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w worker数量 -b ip:端口号 运行文件名：flask实例名</span><br><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ cov]# gunicorn -b <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span> cov:app    //例子</span><br></pre></td></tr></table></figure><p>- w 表示有3 个 工作线程；- b 指定ip 和端口；app 为全局变量 （app = Flask(_ _name _ _)）</p><ul><li>重启gunicorn</li></ul><p><img data-src="https://img.susin3x.cn/images/202203081727660.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZf8zi7rsmqdun3dyxb7cfZ cov]# kill -HUP 15456(主进程)</span><br></pre></td></tr></table></figure><p>我一般会在项目文件修改后重启一下gunicorn</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>到现在项目部署就差不多，访问一下<del><span class="exturl" data-url="aHR0cDovLzQ3LjExMy4xOTcuNDAv">公网ip<i class="fa fa-external-link-alt"></i></span></del>（学生优惠领的服务器快过期了，于是我把flask项目移植到另一个服务器了<span class="exturl" data-url="aHR0cDovL2NvdmlkLnN1c2luM3guY24v">公网ip<i class="fa fa-external-link-alt"></i></span>）看看访问是否成功</p><p><img data-src="https://img.susin3x.cn/images/202203081714168.png"></p><p>项目部署到服务器了，撒花✿✿ヽ(°▽°)ノ✿</p><h2 id="使用crontab定时调度爬虫"><a href="#使用crontab定时调度爬虫" class="headerlink" title="使用crontab定时调度爬虫"></a>使用crontab定时调度爬虫</h2><p>上传spider.py文件至/root目录，终端输入“crontab -e”命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e //编辑该用户的计时器设置</span><br><span class="line">crontab -l //列出该用户的计时器设置</span><br></pre></td></tr></table></figure><p>每隔一小时执行”up_his”下的方法，完成对全国历史数据的爬取；</p><p>每隔30分钟执行”up_det”下的方法，完成对今日详细数据的爬取；</p><p>每隔一小时执行”up_tol”下的方法，完成对当前总数据的爬取；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//crontab编辑内容</span><br><span class="line">* */<span class="number">1</span> * * * python3 /root/spider.py up_his &gt;&gt; /root/log_his <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">*/<span class="number">30</span> * * * * python3 /root/spider.py up_det &gt;&gt; /root/log_det <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">* */<span class="number">1</span> * * * python3 /root/spider.py up_tol &gt;&gt; /root/log_tol <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>完成编辑后按”ESC”键退出编辑模式进入指令模式，输入:wq回车即可保存退出。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>项目部署完成啦，还实现了定时爬取疫情数据，真的很有成就感啊&lt;(￣︶￣)&gt;。之前觉得项目部署很难，现在也觉得没啥了，之后还想着要学习Linux的相关命令。不过ECharts图表还是不能正常显示，中国地图不能显示各省的疫情数据，我看腾讯疫情实时追踪的中国地图好像也是用的ECharts，但腾讯显示是正常的。革命尚未成功，还得继续研究一番呐~</p><p>下图是我的毕业论文二维码，扫描即可查看全文。记录一下，算是督促自己去完善毕设😊，可以尝试用其他模型做对比实验，也可以用其他划分法对疫情数据进行划分。总之就是，生命不息，学习不止。</p><p><img data-src="https://img.susin3x.cn/images/202205181532174.png" alt="susin3x的毕业论文二维码"></p>]]></content>
    
    
    <summary type="html">最近用学生优惠获得了免费使用阿里云服务器的机会，正好将我的毕设项目部署到服务器上。我的毕设项目是中国新冠疫情的预测与监控，希望部署成功后能自动爬取疫情数据，ECharts图表能正常显示。</summary>
    
    
    
    <category term="学习分享" scheme="https://susin3x.cn/categories/%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="https://susin3x.cn/tags/python/"/>
    
    <category term="nginx" scheme="https://susin3x.cn/tags/nginx/"/>
    
    <category term="gunicorn" scheme="https://susin3x.cn/tags/gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day14</title>
    <link href="https://susin3x.cn/posts/b7afdeae.html"/>
    <id>https://susin3x.cn/posts/b7afdeae.html</id>
    <published>2022-02-10T04:29:26.000Z</published>
    <updated>2023-05-16T09:28:52.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a>abstract关键字</h2><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做<font color = red>抽象类</font>。 abstract关键字可以用来修饰的结构：类、方法。</p><p><strong>abstract修饰类：抽象类</strong></p><ul><li>此类不能实例化。</li><li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）。</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作。</li></ul><p><strong>abstract修饰方法：抽象方法</strong></p><ul><li>抽象方法只有方法的声明，没有方法体。</li><li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</li><li>若子类重写了父类中的所有的抽象方法后，此子类方可实例化</li><li>若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰。</li></ul><p>❗  不能用abstract修饰变量、代码块、构造器；<br>❗  不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p><h3 id="抽象类的应用"><a href="#抽象类的应用" class="headerlink" title="抽象类的应用"></a>抽象类的应用</h3><p>抽象类是用来模型化那些父类无法确定全部<font color = red>实现</font>，而是由其子类提供具体<font color = red>实现</font>的对象的类。</p><p>在航运公司系统中，Vehicle类需要定义两个方法分别计算运输工具的燃料效率和行驶距离。</p><ul><li>问题：卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle类不能提供计算方法，但子类可以。</li></ul><p><img data-src="https://img.susin3x.cn/images/202304101740602.png"></p><ul><li>解决方案：Java允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</li><li>Vehicle是一个抽象类，有两个抽象方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">calcFuelEfficiency</span><span class="params">()</span>; <span class="comment">//计算燃料效率的抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">calcTripDistance</span><span class="params">()</span>; <span class="comment">//计算行驶距离的抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Truck</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcFuelEfficiency</span><span class="params">()</span>&#123; <span class="comment">//写出计算卡车的燃料效率的具体方法 &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcTripDistance</span><span class="params">()</span>&#123;  <span class="comment">//写出计算卡车行驶距离的具体方法 &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RiverBarge</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcFuelEfficiency</span><span class="params">()</span>&#123; <span class="comment">//写出计算驳船的燃料效率的具体方法 &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcTripDistance</span><span class="params">()</span>&#123;  <span class="comment">//写出计算驳船行驶距离的具体方法&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>❗  注意：抽象类不能实例化 new Vihicle()是非法的</p><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>编写一个Employee类，声明为抽象类，包含如下三个属性：name，id，salary。提供必要的构造器和抽象方法：work()。对于Manager类来说，他既是员工，还具有奖金(bonus)的属性。请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name;<span class="type">int</span> id;<span class="type">double</span> salary)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name;<span class="type">int</span> id;<span class="type">double</span> salary,<span class="type">double</span> bonus)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,salary,bonus);</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Manager工作的具体方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;员工在一线车间生产产品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;库克&quot;</span>, <span class="number">1001</span>, <span class="number">5000</span>, <span class="number">50000</span>);</span><br><span class="line">        manager.work();</span><br><span class="line">        </span><br><span class="line">        <span class="type">CommonEmployee</span> <span class="variable">commonEmployee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonEmployee</span>();</span><br><span class="line">        commonEmployee.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类的匿名子类对象"><a href="#抽象类的匿名子类对象" class="headerlink" title="抽象类的匿名子类对象"></a>抽象类的匿名子类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        method1(worker);<span class="comment">//非匿名的类非匿名的对象</span></span><br><span class="line">        </span><br><span class="line">        method1(<span class="keyword">new</span> <span class="title class_">Worker</span>());<span class="comment">//非匿名的类匿名的对象</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//创建了一匿名子类的对象：p</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;好好呼吸&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        method1(p);<span class="comment">// 吃东西/n好好呼吸</span></span><br><span class="line">        <span class="comment">//创建匿名子类的匿名对象</span></span><br><span class="line">        method1(<span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃好吃东西&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;好好呼吸新鲜空气&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        p.eat();</span><br><span class="line">        p.breath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Student s)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板方法设计模式-TemplateMethod"><a href="#模板方法设计模式-TemplateMethod" class="headerlink" title="模板方法设计模式(TemplateMethod)"></a>模板方法设计模式(TemplateMethod)</h3><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p>解决的问题：</p><ul><li>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</li><li><font color =red>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SubTemplate</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTemplate</span>();</span><br><span class="line">        t.spendTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">    <span class="comment">//计算某段代码执行所需要花费的时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spendTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="built_in">this</span>.code();<span class="comment">//不确定的部分、易变的部分</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    isFlag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BankTemplateMethod</span> <span class="variable">btm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DrawMoney</span>();</span><br><span class="line">        btm.process();    </span><br><span class="line">        <span class="type">BankTemplateMethod</span> <span class="variable">btm2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManageMoney</span>();</span><br><span class="line">        btm2.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BankTemplateMethod</span> &#123;</span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;取号排队&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">transact</span><span class="params">()</span>; <span class="comment">// 办理具体的业务 //钩子方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evaluate</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反馈评分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.takeNumber();</span><br><span class="line">        <span class="built_in">this</span>.transact();<span class="comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span></span><br><span class="line">        <span class="built_in">this</span>.evaluate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawMoney</span> <span class="keyword">extends</span> <span class="title class_">BankTemplateMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transact</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要取款！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManageMoney</span> <span class="keyword">extends</span> <span class="title class_">BankTemplateMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transact</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要理财！我这里有2000万美元!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：<br>💠 数据库访问的封装<br>💠 Junit单元测试<br>💠 JavaWeb的Servlet中关于doGet/doPost方法调用<br>💠 Hibernate中模板程序<br>💠 Spring中JDBCTemlate、HibernateTemplate等</p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><p>编写工资系统，实现不同类型员工(多态)的按月发放工资。如果当月出现某个Employee对象的生日，则将该雇员的工资增加100元。<strong>实验说明：</strong><br>（1）定义一个Employee类，该类包含：<br>private成员变量name,number,birthday；<br>其中birthday 为MyDate类的对象；abstract方法earnings()；<br>toString()方法输出对象的name,number和birthday。<br>（2）MyDate类包含:<br>private成员变量year,month,day ；<br>toDateString()方法返回日期对应的字符串：xxxx年xx月xx日。<br>（3）定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：<br>private成员变量monthlySalary；<br>实现父类的抽象方法earnings(),该方法返回monthlySalary值；<br>toString()方法输出员工类型信息及员工的name，number,birthday。<br>（4）定义HourlyEmployee类继承Employee类，实现按小时计算工资的员工处理。该类包括：<br>private成员变量wage和hour；<br>实现父类的抽象方法earnings(),该方法返回wage*hour值；<br>toString()方法输出员工类型信息及员工的name，number,birthday。<br>（5）定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。<br>利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday。<br>当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Employee类，该类包含：private成员变量name,number,birthday；其中birthday 为MyDate类的对象；abstract方法earnings()；toString()方法输出对象的name,number和birthday。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name,<span class="type">int</span> number,MyDate birthday)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">earnings</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;,number=&quot;</span> + number + <span class="string">&quot;,birthday=&quot;</span> + birthday.toDateString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MyDate类包含:private成员变量year,month,day ；toDateString()方法返回日期对应的字符串：xxxx年xx月xx日。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDate</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month,<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDateString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：private成员变量monthlySalary；实现父类的抽象方法earnings(),该方法返回monthlySalary值；toString()方法输出员工类型信息及员工的name，number,birthday。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalariedEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> monthlySalary;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SalariedEmployee</span><span class="params">(String name,<span class="type">int</span> number,MyDate birthday)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,number,birthday);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SalariedEmployee</span><span class="params">(String name,<span class="type">int</span> number,MyDate birthday,<span class="type">double</span> monthlySalary)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,number,birthday);</span><br><span class="line">        <span class="built_in">this</span>.monthlySalary = monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMonthlySalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monthlySalary;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonthlySalary</span><span class="params">(<span class="type">double</span> monthlySalary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monthlySalary = monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earnings</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monthlySalary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SalariedEmployee[&quot;</span> + <span class="built_in">super</span>.toString() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义HourlyEmployee类继承Employee类，实现按小时计算工资的员工处理。该类包括：private成员变量wage和hour；实现父类的抽象方法earnings(),该方法返回wage*hour值；toString()方法输出员工类型信息及员工的name，number,birthday。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HourlyEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> wage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hour;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HourlyEmployee</span><span class="params">(String name,<span class="type">int</span> number,MyDate birthday)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,number,birthday);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HourlyEmployee</span><span class="params">(String name,<span class="type">int</span> number,MyDate birthday,<span class="type">double</span> wage,<span class="type">int</span> hour)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,number,birthday);</span><br><span class="line">        <span class="built_in">this</span>.wage = wage;</span><br><span class="line">        <span class="built_in">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">earnings</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wage * hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HourlyEmployee[&quot;</span> + <span class="built_in">super</span>.toString() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday。当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</span></span><br><span class="line"><span class="keyword">import</span> java.utils.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayrollSystem</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH);<span class="comment">//获取当前的月份  一月份：0</span></span><br><span class="line">        </span><br><span class="line">        Employee[] employee = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">2</span>];</span><br><span class="line">        employee[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">SalariedEmployee</span>(<span class="string">&quot;张博&quot;</span>,<span class="number">1001</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1996</span>,<span class="number">9</span>,<span class="number">3</span>),<span class="number">10000</span>);</span><br><span class="line">        employee[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">HourlyEmployee</span>(<span class="string">&quot;潘虹&quot;</span>,<span class="number">1002</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1997</span>,<span class="number">4</span>,<span class="number">25</span>),<span class="number">60</span>,<span class="number">240</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; employee.length;i++)&#123;</span><br><span class="line">            System.out.println(employee[i].toString());</span><br><span class="line">            </span><br><span class="line">            <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> employee[i].earnings();</span><br><span class="line">            <span class="keyword">if</span>(employee[i].getBirthday().getMonth() == (month+<span class="number">1</span>)&#123;</span><br><span class="line">                salary = salary + <span class="number">100</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;生日快乐！奖励100元!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;月工资为：&quot;</span> + salary);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><ul><li>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</li><li>另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。</li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。<font color = red>继承是一个”是不是”的关系，而接口实现则是 “能不能”的关系。</font></li><li><font color =red>接口的本质是契约，标准，规范，</font>就像我们的法律一样。制定好后大家都要遵守。</li></ul><p><img data-src="https://img.susin3x.cn/images/202304151549020.png"></p><p>接口使用interface来定义。在Java中，接口和类是<font color =red>并列</font>关系，可以理解为一种特殊的抽象类。接口<font color =red>只包含<strong>全局常量和抽象方法</strong>的定义</font>（JDK7.0及之前，JDK8除了定义全局常量和抽象方法之外，还可以定义静态方法和默认方法），而没有变量和方法的实现。</p><p>接口中的所有成员变量都默认是由<font color = red>public static final</font>修饰的。但是书写时，可以省略不写。<br>接口中的所有抽象方法都默认是由<font color = red>public abstract</font>修饰的。但是书写时，可以省略不写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中不能定义构造器的！意味着接口不可以实例化。</p><p>Java开发中，接口通过让类去<font color = red>实现(implements)</font>的方式来使用。<font color =red>（面向接口编程）</font></p><ul><li>   如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化。</li><li>   如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个<font color = red>抽象类</font>。</li></ul><p>Java类可以实现多个接口，弥补了Java单继承性的局限性。<font color = red>(先写extends，后写implements)</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_">BB</span> <span class="keyword">implements</span> <span class="title class_">CC</span>,DD,EE&#123;&#125;  <span class="comment">//格式</span></span><br></pre></td></tr></table></figure><p>接口与接口之间可以继承，而且可以多继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">AA</span>,BB&#123;&#125;</span><br></pre></td></tr></table></figure><p>接口的具体使用，体现<strong>多态性</strong>。接口，实际上可以看做是一种规范。</p><p>项目的具体需求是多变的，我们必须以不变应万变才能从容开发，此处的“不变”就是“规范”。因此，我们开发项目往往都是面向接口编程。</p><h3 id="接口的应用：代理模式-Proxy"><a href="#接口的应用：代理模式-Proxy" class="headerlink" title="接口的应用：代理模式(Proxy)"></a>接口的应用：代理模式(Proxy)</h3><p>代理模式是Java开发中使用较多的一种设计模式。<br>代理设计就是为其他对象提供一种代理以控制对这个对象的访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Network</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealServer</span> <span class="keyword">implements</span> <span class="title class_">Network</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;真实服务器上网浏览信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyServer</span> <span class="keyword">implements</span> <span class="title class_">Network</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Network network;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyServer</span><span class="params">(Network network)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.network = network;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;检查网络连接等操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">        check();</span><br><span class="line">        network.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Network</span> <span class="variable">net</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyServer</span>(<span class="keyword">new</span> <span class="title class_">RealServer</span>());</span><br><span class="line">        net.browse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">new</span> <span class="title class_">RealStar</span>());</span><br><span class="line">        s.confer();</span><br><span class="line">        s.signContract();</span><br><span class="line">        s.bookTicket();</span><br><span class="line">        s.sing();</span><br><span class="line">        s.collectMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">confer</span><span class="params">()</span>;<span class="comment">// 面谈</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">signContract</span><span class="params">()</span>;<span class="comment">// 签合同</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bookTicket</span><span class="params">()</span>;<span class="comment">// 订票</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>;<span class="comment">// 唱歌</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">collectMoney</span><span class="params">()</span>;<span class="comment">// 收钱</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealStar</span> <span class="keyword">implements</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signContract</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bookTicket</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;明星：歌唱~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collectMoney</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Star real;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Star real)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.real = real;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人面谈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signContract</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bookTicket</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人订票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;</span><br><span class="line">        real.sing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collectMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经纪人收钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理模式的应用场景：</strong><br>🔹 安全代理：屏蔽对真实角色的直接访问。<br>🔹 远程代理：通过代理类处理远程方法调用（RMI）。<br>🔹 延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象。</p><p>比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理模式。当需要查看图片时，用proxy来进行大图片的打开。</p><p><strong>代理模式的分类：</strong><br>🔹 静态代理（静态定义代理类）<br>🔹 动态代理（动态生成代理类）： JDK自带的动态代理，需要反射等知识。</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>排错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//System.out.println(x);//编译不通过&lt;The field x is ambiguous&gt; 属性x是不明确的</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.x);<span class="comment">//1</span></span><br><span class="line">System.out.println(A.x);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C</span>().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Playable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bounceable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rollable</span> <span class="keyword">extends</span> <span class="title class_">Playable</span>,Bounceable &#123;</span><br><span class="line">    <span class="type">Ball</span> <span class="variable">ball</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ball</span>(<span class="string">&quot;PingPang&quot;</span>);<span class="comment">//省略了public static final修饰符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> <span class="keyword">implements</span> <span class="title class_">Rollable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ball</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        ball = <span class="keyword">new</span> <span class="title class_">Ball</span>(<span class="string">&quot;Football&quot;</span>);<span class="comment">//编译不通过&lt;The final field Rollable.ball cannot be assignedball&gt; ball是全局常量，不可重新赋值</span></span><br><span class="line">        System.out.println(ball.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>定义一个接口用来实现两个对象的比较。<br>定义一个Circle类，声明redius属性，提供getter和setter方法。<br>定义一个ComparableCircle类，继承Circle类并且实现CompareObject接口。在ComparableCircle类中给出接口中方法compareTo的实现体，用来比较两个圆的半径大小。<br>定义一个测试类InterfaceTest，创建两个ComparableCircle对象，调用compareTo方法比较两个类的半径大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompareObject</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span>; <span class="comment">//若返回值是0, 代表相等; 若为正数，代表当前对象大；负数代表当前对象小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Double radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(Double radius)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(Double radius)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getRadius</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparableCircle</span> <span class="keyword">extends</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">CompareObject</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComparableCircle</span><span class="params">(Double radius)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(radius);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o = <span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> ComparableCircle)&#123;</span><br><span class="line">            <span class="type">ComparableCircle</span> <span class="variable">other</span> <span class="operator">=</span> (ComparableCircle) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getRadius().CompareTo(other.getRadius());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入的数据类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest</span>&#123;</span><br><span class="line">    <span class="type">ComparableCircle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComparableCircle</span>(<span class="number">3.4</span>);</span><br><span class="line">    <span class="type">ComparableCircle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComparableCircle</span>(<span class="number">3.6</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">compareValue</span> <span class="operator">=</span> c1.compareTo(c2);</span><br><span class="line">    <span class="keyword">if</span>(compareValue &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;c1对象大&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(compareValue &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;c2对象大&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;c1与c2一样大&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compareValue1</span> <span class="operator">=</span> c1.compareTo(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">    System.out.println(compareValue1);<span class="comment">//java.lang.RuntimeException: 传入的数据类型不匹配  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-8中关于接口的改进"><a href="#Java-8中关于接口的改进" class="headerlink" title="Java 8中关于接口的改进"></a>Java 8中关于接口的改进</h3><p>Java 8中，你可以为接口添加<strong>静态方法</strong>和<strong>默认方法</strong>。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p><p><strong>静态方法：</strong>使用 <strong>static</strong> 关键字修饰。<strong>只能通过接口调用静态方法</strong>，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中找到像Collection/Collections或者Path/Paths这样成对的接口和类。</p><p><strong>默认方法：</strong>默认方法使用 <strong>default</strong> 关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p><ul><li>如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法。</li><li>如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，会出现：<strong>接口冲突。</strong>这就需要在实现类中重写接口中同名同参数的方法。</li><li>如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。因为此时遵守：<strong>类优先原则</strong>。</li><li>在子类(或实现类)的方法中调用父类、接口中被重写的方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method();<span class="comment">//调用自己定义的重写的方法</span></span><br><span class="line"><span class="built_in">super</span>.method();<span class="comment">//调用的是父类中声明的方法</span></span><br><span class="line">InterfaceTest.<span class="built_in">super</span>.method();<span class="comment">//调用接口中的默认方法</span></span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。</p><p>在Java中，允许一个类的定义位于另一个类的内部，前者称为<strong>内部类</strong>，后者称为<strong>外部类</strong>。</p><p>Inner class一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。<br><strong><font color = blue>Inner class的名字不能与包含它的外部类类名相同。</font></strong></p><p>内部类的分类：<strong>成员内部类（静态、非静态）</strong> <strong>vs</strong> <strong>局部内部类(方法内、代码块内、构造器内)</strong></p><p><strong>成员内部类：</strong></p><p>一方面，作为外部类的成员：</p><ul><li>调用外部类的结构；</li><li>可以被<font color = blue><strong>static</strong></font>修饰，但此时就不能再使用外部类的非static的成员变量；</li><li>可以被4种不同的权限修饰，和外部类不同，Inner class还可以声明为<font color = blue><strong>private或protected</strong></font>。</li></ul><p>另一方面，作为一个类：</p><ul><li>类内可以定义属性、方法、构造器等结构；</li><li>可以被<font color = blue><strong>abstract</strong></font>修饰，因此可以被其它的内部类继承；</li><li>可以被<font color = blue><strong>final</strong></font>修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承。</li><li> 编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">222</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mb</span><span class="params">(<span class="type">int</span> s)</span> &#123;</span><br><span class="line">            System.out.println(s); <span class="comment">// 局部变量s</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.s); <span class="comment">// 内部类对象的属性s</span></span><br><span class="line">            System.out.println(Outer.<span class="built_in">this</span>.s); <span class="comment">// 外部类对象属性s</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">b</span> <span class="operator">=</span> a.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        b.mb(<span class="number">333</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。</li><li>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</li><li>成员内部类可以直接使用外部类的所有成员，包括私有的数据</li><li>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</li></ol><p><strong>局部内部类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BB</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">CC</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。</li><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。其他任何地方都不能使用该类。</li><li>局部内部类可以使用外部类的成员，包括私有的。</li><li><font color = blue>局部内部类可以使用外部方法的局部变量，但是必须是final的。</font>这是由局部内部类和局部变量的声明周期不同所致。</li><li>局部内部类和局部变量地位类似，不能使用public，protected，缺省，private。</li><li>局部内部类不能使用static修饰，因此也不能包含静态成员。</li></ul>]]></content>
    
    
    <summary type="html">主要学习了static、final关键字和单例设计模式，理解了main方法的语法结构，String[] args可以在main方法运行前将参数传入main方法中，从控制台输入编译执行命令时传参，实现与控制台交互。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day13</title>
    <link href="https://susin3x.cn/posts/29cb4b0d.html"/>
    <id>https://susin3x.cn/posts/29cb4b0d.html</id>
    <published>2022-02-09T12:27:22.000Z</published>
    <updated>2023-05-14T03:11:00.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，<font color = red>某些特定的数据在内存空间里只有一份</font>，例如所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。<font color =red>如果想让一个类的所有实例共享数据，就用类变量！</font></p><p><img data-src="https://img.susin3x.cn/images/202304071631953.png"></p><p><strong>类属性、类方法的设计思想：</strong></p><ul><li>类属性作为该类各个对象之间共享的变量。在设计类时,分析哪些属性<font color =red>不因对象的不同而改变</font>，将这些属性设置为类属性。相应的方法设置为类方法。</li><li>如果方法与调用者无关，则这样的方法通常被声明为类方法，由于<font color= red>不需要创建对象就可以调用类方法</font>，从而简化了方法的调用。</li></ul><p><strong>在Java类中，可用static修饰<font color =red>属性、方法、代码块、内部类</font>。被修饰后的成员具备以下特点：</strong><br>🔸随着类的加载而加载<br>🔸优先于对象存在<br>🔸修饰的成员，被所有对象所共享<br>🔸访问权限允许时，可不创建对象，直接被类调用</p><p><strong>1.使用static修饰属性：静态变量（类变量）</strong></p><p>属性，按是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)</p><p><strong>实例变量：</strong>我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</p><p><strong>静态变量：</strong>我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p><p>① 静态变量随着<font color =red>类的加载而加载</font>，可以通过“class.静态变量”的方式进行调用。<br>② 静态变量的加载要早于对象的创建。<br>③ <font color = red>由于类只会加载一次，则静态变量在内存中也只会存在一份：<strong>存在于方法区的静态域中。</strong></font></p><table><thead><tr><th align="center">调用</th><th align="center">静态变量</th><th align="center">实例变量</th></tr></thead><tbody><tr><td align="center">类</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">对象</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><p>静态属性举例：System.out; Math.PI;</p><p><strong>静态变量的内存解析：</strong></p><p><img data-src="https://img.susin3x.cn/images/202304071726072.png"></p><p><strong>2.使用static修饰方法：静态方法（类方法）</strong></p><p>静态方法随着<font color = red>类的加载而加载</font>，没有创建对象时，可以通过“**class.方法名()**”的方式进行调用。</p><table><thead><tr><th align="center">调用</th><th align="center">静态方法</th><th align="center">非静态方法</th></tr></thead><tbody><tr><td align="center">类</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">对象</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><p><font color = red>在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static的结构。</font>非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性。</p><p>❗  因为不需要实例就可以访问static方法，因此在静态方法内，不能使用this关键字和super关键字</p><p>❗  <font color = red>static修饰的方法不能被重写</font></p><p><strong>3.开发中，如何确定一个属性是否要声明为static的？</strong></p><ul><li>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</li><li>类中的常量也常常声明为static。</li></ul><p><strong>4.开发中，如何确定一个方法是否要声明为static的？</strong></p><ul><li>操作静态属性的方法，通常设置为static的</li><li>工具类中的方法，习惯上声明为static，比如：Math、Arrays、Collections</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。账号要自动生成。编写主类，使用银行账户类，输入、输出3个储户的上述信息。考虑哪些属性可以设计成static属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;000000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> interestRate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">minMoney</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">1001</span>;<span class="comment">//用于自动生成id使用的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span>&#123;</span><br><span class="line">        id = init++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String pwd,<span class="type">double</span> balance)</span>&#123;</span><br><span class="line">        id = init++;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getInterestRate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> interestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setInterestRate</span><span class="params">(<span class="type">double</span> interestRate)</span> &#123;</span><br><span class="line">        Account.interestRate = interestRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getMinMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMinMoney</span><span class="params">(<span class="type">double</span> minMoney)</span> &#123;</span><br><span class="line">        Account.minMoney = minMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account [id=&quot;</span> + id + <span class="string">&quot;, pwd=&quot;</span> + pwd + <span class="string">&quot;, balance=&quot;</span> + balance + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">acct1</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">acct2</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;qwerty&quot;</span>,<span class="number">2000</span>);</span><br><span class="line">        Account.setInterestRate(<span class="number">0.012</span>);</span><br><span class="line">        Account.setMinMoney(<span class="number">100</span>);</span><br><span class="line">        System.out.println(acct1);<span class="comment">//Account [id=1001, pwd=000000, balance=0.0]</span></span><br><span class="line">        System.out.println(acct2);<span class="comment">//Account [id=1002, pwd=qwerty, balance=2000.0]</span></span><br><span class="line">        System.out.println(acct1.getInterestRate());<span class="comment">//0.012</span></span><br><span class="line">        System.out.println(acct1.getMinMoney());<span class="comment">//100.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><font color = red>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格以及解决问题的思考方式。</font>设计模免去我们自己再思考和摸索。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。<font color = red>“套路”</font></p><p><strong>创建型模式(共5种)：</strong>工厂方式模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p><strong>结构型模式(7种)：</strong>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p><strong>行为型模式(11种)：</strong>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h3 id="单例-Singleton-设计模式"><a href="#单例-Singleton-设计模式" class="headerlink" title="单例 (Singleton)设计模式"></a>单例 (Singleton)设计模式</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<font color =red>只能存在一个对象实例</font>，并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须<font color =red>将类的构造器的访问权限设置为private</font>，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，<font color =red>只能调用该类的某个静态方法</font>以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的<font color = red>该类对象的变量也必须定义成静态的。</font></p><h4 id="单例-Singleton-设计模式-饿汉式"><a href="#单例-Singleton-设计模式-饿汉式" class="headerlink" title="单例(Singleton)设计模式-饿汉式"></a>单例(Singleton)设计模式-饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.内部提供一个当前类的实例</span></span><br><span class="line">    <span class="comment">// 4.此实例也必须静态化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">single</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="comment">// 3.提供公共的静态的方法，返回当前类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank1</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank2</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        System.out.println(bank1 == bank2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.内部创建类的对象</span></span><br><span class="line">    <span class="comment">//4.要求此对象也必须声明为静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">    <span class="comment">//3.提供公共的静态的方法，返回类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例-Singleton-设计模式-懒汉式"><a href="#单例-Singleton-设计模式-懒汉式" class="headerlink" title="单例(Singleton)设计模式-懒汉式"></a>单例(Singleton)设计模式-懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.内部提供一个当前类的实例</span></span><br><span class="line">    <span class="comment">// 4.此实例也必须静态化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single;</span><br><span class="line">    <span class="comment">// 3.提供公共的静态的方法，返回当前类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(single == <span class="literal">null</span>) &#123;</span><br><span class="line">            single = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> Order.getInstance();</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> Order.getInstance();</span><br><span class="line">        System.out.println(order1 == order2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.声明当前类对象，没有初始化</span></span><br><span class="line">    <span class="comment">//4.此对象也必须声明为static的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Order</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = red>懒汉式暂时还存在线程安全问题，讲到多线程时，可修复</font></p><p><strong>单例模式的优点：</strong><br>由于单例模式只生成一个实例，<font color =red>减少了系统性能开销</font>，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。举例java.lang.Runtime如下：</p><p><img data-src="https://img.susin3x.cn/images/202304081342240.png"></p><h4 id="单例-Singleton-设计模式-应用场景"><a href="#单例-Singleton-设计模式-应用场景" class="headerlink" title="单例(Singleton)设计模式-应用场景"></a>单例(Singleton)设计模式-应用场景</h4><ul><li><strong>网站的计数器</strong>，一般也是单例模式实现，否则难以同步。</li><li><strong>应用程序的日志应用</strong>，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。</li><li><strong>数据库连接池</strong>的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。</li><li>项目中，<strong>读取配置文件的类</strong>，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。</li><li><strong>Application也是单例的典型应用</strong></li><li>Windows的<strong>Task Manager</strong> (任务管理器)就是很典型的单例模式</li><li>Windows的<strong>Recycle Bin</strong> (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</li></ul><h2 id="理解main方法的语法"><a href="#理解main方法的语法" class="headerlink" title="理解main方法的语法"></a>理解main方法的语法</h2><ul><li>由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。</li><li>又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。</li></ul><p><strong>main()方法的使用说明：</strong></p><ol><li>main()方法作为程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令行参数用法举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandPara</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;] = &quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序CommandPara.java  ——&gt;  java CommandPara “Tom”  Jerry  Susin3x</p><p><img data-src="https://img.susin3x.cn/images/202304081531397.png"></p><p>输出结果：<br>args[0] = Tom<br>args[1] = Jerry<br>args[2] = Susin3x</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>此处，Something类的文件名叫OtherThing.java，程序是否可以正常编译、运行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] something_to_do)</span> &#123;        </span><br><span class="line">        System.out.println(<span class="string">&quot;Do something ...&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确。没有规定Java的Class名字必须和其文件名相同。但public class的名字必须和文件名相同。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p> 代码块(或初始化块)的作用：对Java类或对象进行初始化</p><p>代码块(或初始化块)的分类：一个类中代码块若有修饰符，则<font color =red>只能被static修饰</font>，称为<strong>静态代码块</strong>(static block)，没有使用static修饰的，为<strong>非静态代码块</strong>。</p><p> static代码块通常用于初始化static的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> total;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        total = <span class="number">100</span>;<span class="comment">//为total赋初值</span></span><br><span class="line">    &#125;</span><br><span class="line">    …… <span class="comment">//其它属性或方法声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态代码块：用static修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</li><li>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</li><li>静态代码块的执行要先于非静态代码块。</li><li>静态代码块随着类的加载而加载，且只执行一次。</li></ol><p><strong>非静态代码块：没有static修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>除了调用非静态的结构外，还可以调用静态的属性和方法。</li><li>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</li><li>每次创建对象的时候，都会执行一次，<font color =red>且先于构造器执行。</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化块举例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;11111111111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;22222222222&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;33333333333&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;44444444444&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;55555555555&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;66666666666&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// 由父及子 静态先行</span></span><br><span class="line">System.out.println(<span class="string">&quot;77777777777&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img data-src="https://img.susin3x.cn/images/202304081615927.png"></p><p>程序中成员变量赋值的执行顺序：</p><p><img data-src="https://img.susin3x.cn/images/202304081619754.png"></p><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>在Java中声明<font color =red>类、变量和方法</font>时，可使用关键字final来修饰,表示“最终的”。</p><p>1、final标记的类不能被继承。提高安全性，提高程序的可读性。<br>如String类、System类、StringBuffer类</p><p>2、final标记的方法不能被子类重写。比如：Object类中的getClass()。</p><p>3、final标记的变量(成员变量或局部变量)即称为常量。名称大写，且只能被赋值一次。</p><ul><li><p>final修饰属性：可以考虑赋值的位置有：<strong>显式初始化、代码块中初始化、构造器中初始化</strong></p></li><li><p>final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值后，就只能在方法体内使用此形参，但不能进行重新赋值。</p></li></ul><p><font color =red><strong>static final用来修饰属性：全局常量</strong></font></p><p><img data-src="https://img.susin3x.cn/images/202304081706448.png"></p>]]></content>
    
    
    <summary type="html">主要学习了static、final关键字和单例设计模式，理解了main方法的语法结构，String[] args可以在main方法运行前将参数传入main方法中，从控制台输入编译执行命令时传参，实现与控制台交互。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day12</title>
    <link href="https://susin3x.cn/posts/5ecc7b9b.html"/>
    <id>https://susin3x.cn/posts/5ecc7b9b.html</id>
    <published>2022-02-08T12:27:22.000Z</published>
    <updated>2023-05-14T03:11:00.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h2><p><font color = red>Object类是所有Java类的根父类。</font></p><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(Object obj)&#123;…&#125; <span class="comment">//可以接收任何类作为其参数</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">method(o);</span><br></pre></td></tr></table></figure><p>Object类中的功能(属性、方法)就具通用性。</p><ul><li>属性：无</li><li>构造器：Object类只声明了一个空参的构造器</li><li>方法：clone()、equals(Object obj)、finalize()、getClass()、hashCode()、notify()、notifyAll()、toString()、wait()、wait(long timeout)、wait(long timeout,  int nanos)</li></ul><h3 id="操作符与equals"><a href="#操作符与equals" class="headerlink" title="==操作符与equals()"></a>==操作符与equals()</h3><h4 id="运算符"><a href="#运算符" class="headerlink" title="== 运算符"></a>== 运算符</h4><ol><li>可以使用在基本数据类型变量和引用数据类型变量中。</li><li>如果比较的是基本数据类型变量：比较两个变量保存的<font color =red>数据</font>是否相等<font color =red>（不一定类型要相同）</font>。</li><li>如果比较的是引用数据类型变量：比较两个对象的<font color = red>地址值</font>是否相同，即引用是否指向同一个对象。</li></ol><p> ❗ 用==进行比较时，符号两边的数据类型必须兼容(可自动转换的基本数据类型除外)，否则<font color = red>编译出错</font>。</p><h4 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h4><ol><li>是一个方法，而非运算符。</li><li>只能比较引用类型，作用与“==”相同，比较是否指向同一个对象。</li><li>Object类中equals()的定义：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><font color = red>类File、String、Date及包装类（Wrapper Class）</font>等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的<font color = red>类型和内容</font>是否相同。</li><li>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的“<font color = red>实体内容</font>”是否相同。那么，我们就需要对Object类中的equals()进行重写。</li></ol><p><strong>重写equals()方法的原则：</strong></p><p><font color = red>对称性：</font>如果x.equals(y)返回是true，那么y.equals(x)也应该返回是true。<br><font color = red>自反性：</font>x.equals(x)必须返回是true。<br><font color =red>传递性：</font>如果x.equals(y)返回是true，y.equals(z)返回是true，那么z.equals(x)返回也是true。<br><font color =red>一致性：</font>如果x.equals(y)返回是true，只要x和y内容一直不变，不管重复多少次，返回都是true。<br>任何情况下，x.equals(null)，永远返回是false；x.equals(和x不同类型的对象)永远返回是false。</p><h4 id="和equals的区别（面试题）"><a href="#和equals的区别（面试题）" class="headerlink" title="==和equals的区别（面试题）"></a>==和equals的区别（面试题）</h4><p>1）对于==，比较的是值是否相等<br>如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；<br>如果作用于引用类型的变量，则比较的是所指向的对象的地址</p><p>2）对于equals方法，比较的是是否是同一个对象<br>equals方法不能作用于基本数据类型的变量，equals继承Object类；<br>如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；<br>诸如String、Date、file等类对equals方法进行了重写的话，比较的是所指向的对象的内容。</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><strong>练习一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>; </span><br><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">65.0f</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(“<span class="number">65</span>和<span class="number">65.0f</span>是否相等？” + (i == f));               <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;65和&#x27;A&#x27;是否相等？&quot;</span> + (i == ch1));               <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;12和ch2是否相等？&quot;</span> + (<span class="number">12</span> == ch2));              <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;str1和str2是否相等？&quot;</span>+ (str1 == str2));         <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;str1是否equals str2？&quot;</span>+(str1.equals(str2)));   <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> == <span class="keyword">new</span> <span class="title class_">java</span>.util.Date());              <span class="comment">//编译不通过</span></span><br><span class="line">System.out.println(b == i);                                       <span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure><p><strong>练习二</strong></p><p>编写Order类，有int型的orderId，String型的orderName，相应的getter()和setter()方法，两个参数的构造器，重写父类的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对象是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">12</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">12</span>,<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;BB&quot;</span>));</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">12</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        System.out.println(order1.equals(order2));<span class="comment">//false</span></span><br><span class="line">        System.out.println(order2.equals(order3));<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;BB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;BB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s2 == s3);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(<span class="type">int</span> orderId,String orderName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderId</span><span class="params">(<span class="type">int</span> orderId)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrderId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderName</span><span class="params">(String orderName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == obj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Order)&#123;</span><br><span class="line">            <span class="type">Order</span> <span class="variable">other</span> <span class="operator">=</span> (Order)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.OrderId = other.OrderId &amp;&amp; <span class="built_in">this</span>.orderName.equals(other.OrderName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color =red>直接创建</font>String类型对象时，JVM首先会去字符串常量池中查找是否存在“BB” 这个对象。如果不存在，则在字符串常量池中创建“BB”这个对象，然后将池中“BB”对象的引用地址返回给对象s1，这样s1的地址就在常量池中。如果存在，则不创建任何对象，直接将存在的“BB”的地址返回给对象s2。这就是为什么s1等于s2的原因。</p><p>而通过<font color =red>new方法</font>创建的String对象，其创建的字符串是放在堆当中的。将堆当中的字符串地址返回赋值给s3，s1和s3的存放地址不相同，一个在字符串常量池中，一个在堆当中，字符串常量池外，因此返回的值是false。</p><p><strong>练习三</strong></p><p>根据以下代码自行定义能满足需要的MyDate类,在MyDate类中覆盖equals方法，使其判断当两个MyDate类型对象的年月日都相同时，结果为true，否则为false。public boolean equals(Object o)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyDate</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">14</span>, <span class="number">3</span>, <span class="number">1976</span>);</span><br><span class="line">        <span class="type">MyDate</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">14</span>, <span class="number">3</span>, <span class="number">1976</span>);</span><br><span class="line">        <span class="keyword">if</span> (m1 == m2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1==m2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1!=m2&quot;</span>); <span class="comment">// m1 != m2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m1.equals(m2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1 is equal to m2&quot;</span>);<span class="comment">// m1 is equal to m2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1 is not equal to m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDate</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month,<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == o)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> MyDate)&#123;</span><br><span class="line">            <span class="type">MyDate</span> <span class="variable">other</span> <span class="operator">=</span> (MyDate)o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.year == other.year &amp;&amp; <span class="built_in">this</span>.month = other.month &amp;&amp; <span class="built_in">this</span>.day = other.day;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h3><p>toString()方法在Object类中定义，其返回值是String类型，返回类名和它的引用地址。<font color = red>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()。</font>像<font color = red>String、Date、File、包装类</font>等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回“实体内容”信息。自定义类也可以重写toString()方法，当调用此方法时，返回对象的“实体内容”。</p><ul><li>Object类中toString()的定义：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何重写toString()，举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Customer [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 在进行String与其它类型数据的连接操作时，自动调用toString()方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;now = &quot;</span> + now); <span class="comment">//相当于</span></span><br><span class="line">System.out.println(<span class="string">&quot;now = &quot;</span> + now.toString());</span><br></pre></td></tr></table></figure><ul><li>可以根据需要在用户自定义类型中重写toString()方法<br>如String 类重写了toString()方法，返回字符串的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(s1);<span class="comment">//相当于System.out.println(s1.toString());</span></span><br></pre></td></tr></table></figure><ul><li>基本类型数据转换为String类型时，调用了对应包装类的toString()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>1.输出以下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line">System.out.println(arr);<span class="comment">//abc</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">System.out.println(arr1);<span class="comment">//[I@4459eb14</span></span><br><span class="line"><span class="type">double</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span> &#125;;</span><br><span class="line">System.out.println(arr2);<span class="comment">//[D@5a2e4553</span></span><br></pre></td></tr></table></figure><p>2.定义两个类，父类GeometricObject代表几何形状，子类Circle代表圆形。在测试类创建两个Circle对象，判断其颜色是否相等；利用equals方法判断其半径是否相等；利用toString()方法输出其半径。</p><p><img data-src="https://img.susin3x.cn/images/202302282210405.svg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeometricObject</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> String color;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">double</span> weight;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">GeometricObject</span><span class="params">()</span> &#123;</span><br><span class="line">color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">weight = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">GeometricObject</span><span class="params">(String color, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.color = color;</span><br><span class="line"><span class="built_in">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">GeometricObject</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">radius = <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius, String color, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(color,weight);</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">other</span> <span class="operator">=</span> (Circle) obj;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.radius == other.radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Circle [radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>,<span class="string">&quot;blue&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(c1.getColor().equals(c2.getColor()));</span><br><span class="line">System.out.println(c1.equals(c2));</span><br><span class="line">System.out.println(c1);<span class="comment">//默认调用toString方法 </span></span><br><span class="line">System.out.println(c2.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java中的JUnit单元测试"><a href="#Java中的JUnit单元测试" class="headerlink" title="Java中的JUnit单元测试"></a>Java中的JUnit单元测试</h2><ol><li>选中当前工程 - 右键选择：build path - add libraries - JUnit 4 - 下一步</li><li>创建Java类，进行单元测试。Java类要求：① 此类是public的  ②此类提供公共的无参的构造器</li><li>此类中声明单元测试方法。此时的单元测试方法：方法的权限是public,没有返回值，没有形参</li><li>此单元测试方法上需要声明注解：@Test，并在单元测试类中导入：import org.junit.Test；</li><li>声明好单元测试方法以后，就可以在方法体内测试相关的代码。</li><li>写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</li></ol><p>📌 说明：如果执行结果没有任何异常：绿条；2.如果执行结果出现异常：红条。</p><h2 id="包装类-Wrapper-的使用"><a href="#包装类-Wrapper-的使用" class="headerlink" title="包装类(Wrapper)的使用"></a>包装类(Wrapper)的使用</h2><p> 针对八种基本数据类型定义相应的引用类型——包装类（封装类）。<br> 有了类的特点，就可以调用类中的方法，Java才是真正的面向对象。</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center"><font color = red>int</font></td><td align="center"><font color = red>Interger</font></td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center"><font color = red>char</font></td><td align="center"><font color = red>Character</font></td></tr></tbody></table><p>Byte、Short、Integer、Long、Float、Double的父类是Number。</p><ul><li><strong>基本数据类型包装成包装类的实例 ——<font color = red>装箱</font></strong><br>通过包装类的构造器实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还可以通过字符串参数构造包装类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;4.56&quot;</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="string">&quot;asdf&quot;</span>);  <span class="comment">//NumberFormatException</span></span><br></pre></td></tr></table></figure><ul><li><strong>获得包装类对象中包装的基本类型变量 ——<font color = red>拆箱</font></strong><br>调用包装类的.xxxValue()方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> bObj.booleanValue();</span><br></pre></td></tr></table></figure><p> <strong><font color = red>JDK1.5之后</font>，支持自动装箱、自动拆箱，但类型必须匹配。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> num1;<span class="comment">//自动装箱Integer in1 = new Integer(num2);</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> b1;<span class="comment">//自动装箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动拆箱：包装类——&gt;基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> i;<span class="comment">//自动拆箱int num3 = in1.intValue();</span></span><br></pre></td></tr></table></figure><ul><li>字符串转换成基本数据类型<br>通过包装类的构造器实现：</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;12&quot;</span>);</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过包装类的parseXxx(String s)静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Float</span> <span class="variable">f</span> <span class="operator">=</span> Float.parseFloat(<span class="string">&quot;12.1&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>基本数据类型转换成字符串<br>调用字符串重载的valueOf()方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(<span class="number">2.34f</span>);</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;更直接的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">5</span> + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img data-src="https://img.susin3x.cn/images/202303041911229.svg" alt="包装类"></p><p>简易版：<br>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱<br>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)<br>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)<br>注意：转换时，可能会报NumberFormatException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装类在实际开发中用的最多的在于字符串变为基本数据类型。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;30&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;30.3&quot;</span> ;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(str1) ; <span class="comment">// 将字符串变为int型</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> Float.parseFloat(str2) ; <span class="comment">// 将字符串变为int型</span></span><br></pre></td></tr></table></figure><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。<br> ❗ 提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。而向量类java.util.Vector可以根据需要动态伸缩。<br>→ 创建Vector对象：Vector v=new Vector();<br>→ 给向量添加元素：v.addElement(Object obj);   //obj必须是对象<br>→ 取出向量中的元素：Object  obj=v.elementAt(0);<br>→ 注意第一个元素的下标是0，返回值是Object类型的。<br>→ 计算向量的长度：v.size();<br>→ 若与最高分相差10分内：A等；20分内：B等；30分内：C等；其它：D等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vector</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生成绩：(以负数代表输入结束)&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxScore</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (score &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(score &gt; <span class="number">100</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的数据非法，请重新输入&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v.addElement(score);</span><br><span class="line">            <span class="keyword">if</span> (score &gt; maxScore) &#123;</span><br><span class="line">                maxScore = score;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;最高分是：&quot;</span> + maxScore);</span><br><span class="line">    <span class="type">char</span> grade;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> (Integer)v.elementAt(i);   <span class="comment">//int score = (int)v.elementAt(i);</span></span><br><span class="line">        <span class="keyword">if</span> (maxScore - score &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            grade = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxScore - score &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            grade = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxScore - score &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            grade = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            grade = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;成绩为：&quot;</span> + score + <span class="string">&quot;，等级为 &quot;</span> + grade);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>1.如下两个题目输出结果相同吗？各是什么：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o1);<span class="comment">//1.0  自动类型提升</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object o2;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">    o2 = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    o2 = <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o2);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><strong>2.输出以下结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span></span><br><span class="line"><span class="comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span></span><br><span class="line"><span class="comment">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(m == n);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">//相当于new了一个Integer对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">//相当于new了一个Integer对象</span></span><br><span class="line">System.out.println(x == y);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>面试题：</p><p>final、finally、finalize的区别？</p>]]></content>
    
    
    <summary type="html">主要学习了Object类和包装类的使用，要注意区分==操作符和equal()方法，诸如String、Date、file等类对equals方法和toString()方法进行了重写，所以是比较和返回“实体内容”的信息。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day11</title>
    <link href="https://susin3x.cn/posts/c7c52a21.html"/>
    <id>https://susin3x.cn/posts/c7c52a21.html</id>
    <published>2022-02-07T07:37:05.000Z</published>
    <updated>2023-05-14T03:11:00.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象的特征之二：继承性（inheritance）"><a href="#面向对象的特征之二：继承性（inheritance）" class="headerlink" title="面向对象的特征之二：继承性（inheritance）"></a>面向对象的特征之二：继承性（inheritance）</h2><p>定义Person类处理个人信息，定义Student类处理学生信息，Student类继承了Person类的所有属性和方法，并增加了school属性及get和set方法，Person类中的属性和方法在Student都可以使用。</p><p><img data-src="https://img.susin3x.cn/images/202207181302645.svg" alt="继承性"></p><p>多个<font color = red>子类(派生类，subclass)</font>中存在相同属性和行为时，将这些结构抽取到单独一个<font color = red>父类(超类、基类、superclass)</font>中，那么子类无需再定义这些属性和行为，只要继承父类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类继承的语法格式:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subclass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承性的作用：</strong><br>📌 减少了代码冗余，提高了代码的复用性；<br>📌 更有利于功能的扩展；<br>📌 让类与类之间产生了关系，提供了多态的前提。<br> ❗ 注意：不要仅为了获取其他类中某个功能而去继承</p><p><strong>继承性的体现：</strong><br>📌 一旦子类继承父类以后，子类中就获取了父类中声明的<font color = red>所有的属性和方法</font>。<br>📌 在子类中可以使用父类中定义的方法和属性，也可以<font color = red>创建新的属性和方法</font>，实现功能的拓展。<br>📌 在java 中继承的关键字用的是“extends”，即<font color = red>子类不是父类的子集，而是对父类的“扩展”</font>。</p><p><strong>关于继承的规则：</strong>子类不能直接访问父类中私有的(private)的属性和方法。父类中私有的属性和方法，仍然是被子类获取了，只是因为<font color = red>封装性</font>的影响，使得子类不能直接调用父类的私有结构而已。</p><p><strong>继承性的规定：</strong><br>📌 Java只支持<font color = red>类的单继承（接口是多继承）和多层继承</font>，不允许<font color = red>多重继承</font>。一个子类只能有一个父类（java中类的单继承性），一个父类可以派生出多个子类，子类和父类是相对的概念。<br>📌 子类直接继承的父类称为<font color = red>直接父类</font>，间接继承的父类称为<font color = red>间接父类</font>，子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法。<br>📌 如果没有<font color = red>显式</font>的声明一个类的父类的话，则此类继承于<font color = red>java.lang.Object类</font>。所有的java类（除Object类之外）都直接或间接地继承于Object类，意味着所有的java类具有Object类声明的功能。</p><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的体积。</p><p><img data-src="https://img.susin3x.cn/images/202207221746449.svg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">        radius = <span class="number">1</span>;<span class="comment">//自动类型提升，int -&gt; double</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cylinder</span> <span class="keyword">extends</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cylinder</span><span class="params">()</span>&#123;</span><br><span class="line">        length = <span class="number">1</span>;<span class="comment">//自动类型提升，int -&gt; double</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findVolume</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findArea() * length; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CylinderTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Cylinder</span> <span class="variable">cylinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cylinder</span>();</span><br><span class="line">        </span><br><span class="line">        cylinder.setRadius(<span class="number">3</span>);</span><br><span class="line">       cylinder.setLength(<span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(cylinder.findVolume);<span class="comment">//输出113.09733552923255</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="debug常用操作"><a href="#debug常用操作" class="headerlink" title="debug常用操作"></a>debug常用操作</h2><table><thead><tr><th align="center">操作</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">step into 跳入（f5）</td><td align="center">进入当前行所调用的方法中</td></tr><tr><td align="center">step over 跳过（f6）</td><td align="center">执行完当前行的语句，进入下一行</td></tr><tr><td align="center">step return 跳回（f7）</td><td align="center">执行完当前行所在的方法，进入下一行</td></tr><tr><td align="center">drop to frame</td><td align="center">回到当前行所在方法的第一行</td></tr><tr><td align="center">resume 恢复</td><td align="center">执行完当前行所在断点的所有代码，进入下一个断点，如果没有就结束</td></tr><tr><td align="center">Terminate 终止</td><td align="center">停止JVM，后面的程序不会再执行</td></tr></tbody></table><h2 id="方法的重写-override-overwrite"><a href="#方法的重写-override-overwrite" class="headerlink" title="方法的重写(override/overwrite)"></a>方法的重写(override/overwrite)</h2><p>在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的<font color = red>重置、覆盖</font>。在程序执行时，父类的<font color = red>同名方法将被子类的方法所覆盖</font>。重写后实例化子类，通过子类对象调用子父类中的<font color =  red>同名同参数</font>的方法时，<font color = red>实际执行的是子类重写父类的方法</font>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法重写的声明:</span></span><br><span class="line">权限修饰符  返回值类型  方法名(形参列表) <span class="keyword">throws</span> 异常的类型&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重写的要求：</strong></p><ol><li>子类重写的方法必须和父类被重写的方法具有相同的方法名称和参数列表。</li><li>子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限，<font color = red>子类不能重写父类中声明为private权限的方法。</font></li><li>子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型。</li></ol><ul><li>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void。</li><li>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型是A类或它的子类。</li><li>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)。</li></ul><ol start="4"><li>子类方法抛出的异常不能大于父类被重写方法的异常。</li></ol><p> ❗ 注意：子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法重写的举例：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;&#125;<span class="comment">//求面积</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span> <span class="keyword">extends</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;&#125;<span class="comment">//求表面积</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❗-重写的重载的区别（面试题）"><a href="#❗-重写的重载的区别（面试题）" class="headerlink" title="❗ 重写的重载的区别（面试题）"></a>❗ 重写的重载的区别（面试题）</h3><p>1.二者的定义细节：重载和重写的概念和具体规则<br>2.从编译和运行的角度看：<br><font color = red>重载：不表现为多态性；重写：表现为多态性。</font><br>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法，它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p><p>对重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为<font color = red>早绑定</font>或<font color = red>静态绑定</font>；而对于多态，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为<font color = red>晚绑定</font>或<font color = red>动态绑定</font>。 引用一句Bruce Eckel的话：“<font color = red>不要犯傻，如果它不是晚绑定，它就不是多态。</font>”</p><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p>权限修饰符（权限从小到大排列）private，缺省、protected、public置于<font color = red>类的成员定义前</font>，用来限定对象对该类成员的访问权限。</p><table><thead><tr><th align="center">修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">缺省</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><font color = red>protected</font></td><td align="center"><font color = red>yes</font></td><td align="center"><font color = red>yes</font></td><td align="center"><font color = red>yes</font></td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><p>📌 在<font color = red>同一个包中的类</font>中，不可以调用此包中<font color = red>其他类的私有属性及方法</font>；<br>📌 在<font color = red>不同包的子类</font>中，不能调用<font color = red>其父类中声明为private和缺省权限的属性及方法</font>；<br>📌 在<font color = red>不同包的普通类</font>中，不可以调用<font color =red>其他包的类声明为private,缺省,protected权限的属性及方法</font>。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>在java类中使用super来调用父类中的指定操作：<br>📌 super可用于访问父类中定义的属性<br>📌 super可用于调用父类中定义的成员方法<br>📌 super可用于在子类构造器中调用父类的构造器</p><p>尤其当子父类出现同名成员时，可以用super表明调用的是父类中的成员。super的追溯不仅限于直接父类。super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识。</p><h3 id="super调用属性和方法"><a href="#super调用属性和方法" class="headerlink" title="super调用属性和方法"></a>super调用属性和方法</h3><ol><li>我们可以在子类的方法或构造器中，通过使用“super.属性”或“super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略“super.”。</li><li>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用“super.属性”的方式，表明调用的是父类中声明的属性。</li><li>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用“super.方法”的方式，表明调用的是父类中被重写的方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name: &quot;</span> + name + <span class="string">&quot;；age: &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;New Oriental&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;；school: &quot;</span> + school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(st.getInfo());<span class="comment">//Name: 张三；age: 0；school: New Oriental</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super调用父类的构造器"><a href="#super调用父类的构造器" class="headerlink" title="super调用父类的构造器"></a>super调用父类的构造器</h3><p>📌 子类中所有的构造器<font color = red>默认</font>都会访问父类中<font color = red>空参数</font>的构造器；</p><p>📌 当父类中没有空参数的构造器时，子类的构造器必须通过<font color = red>“this(形参列表)”或“super(形参列表)”</font>显式的调用本类或者父类中相应的构造器。同时，只能<font color = red>“二选一”</font>，且必须放在构造器的<font color = red>首行</font>；</p><p>📌 在类的多个构造器中，<font color = red>至少有一个类</font>的构造器使用了“super(形参列表)”，调用父类中的构造器；</p><p>📌 如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则<font color = red>编译出错</font>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Date d)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, age, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Date d)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">30</span>, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 编译出错: no super()，系统将调用父类无参数的构造器。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String s)</span> &#123; </span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this和super的区别"><a href="#this和super的区别" class="headerlink" title="this和super的区别"></a>this和super的区别</h3><table><thead><tr><th align="center">区别</th><th align="center">this</th><th align="center">super</th></tr></thead><tbody><tr><td align="center">访问属性</td><td align="center">访问本类中的属性，如果本类没有此属性<br />则从父类中继续查找</td><td align="center">直接访问父类中的属性</td></tr><tr><td align="center">调用方法</td><td align="center">访问本类中的方法，如果本类没有此方法<br />则从父类中继续查找</td><td align="center">直接访问父类中的方法</td></tr><tr><td align="center">调用构造器</td><td align="center">调用本类构造器，必须放在构造器的首行</td><td align="center">调用父类构造器，必须放在子类构造器的首行</td></tr></tbody></table><h2 id="子类对象的实例化过程"><a href="#子类对象的实例化过程" class="headerlink" title="子类对象的实例化过程"></a>子类对象的实例化过程</h2><p>从结果上来看：（继承性）子类继承父类以后，就获取了父类中声明的属性或方法。创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</p><p>从过程上来看：当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。</p><p> ❗  虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即new的子类对象。</p><h2 id="面向对象的特征之三：多态性（polymorphism）"><a href="#面向对象的特征之三：多态性（polymorphism）" class="headerlink" title="面向对象的特征之三：多态性（polymorphism）"></a>面向对象的特征之三：多态性（polymorphism）</h2><p>多态性，可以理解为一个事物的多种形态。在Java中的体现是，<font color = red>父类的引用指向子类的对象</font>，并且可以直接应用在抽象类和接口上。</p><p>Java引用变量有两个类型：<font color = red>编译时类型和运行时类型</font>。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。简称：<font color = red>编译时，看左边；运行时，看右边。</font>若编译时类型和运行时类型不一致，就出现了对象的多态性。多态情况下，“看左边”：看的是父类的引用（父类中不具备子类特有的方法）；“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）。</p><p>对象的多态——在Java中，子类的对象可以替代父类的对象使用。一个变量只能有一种确定的数据类型，一个引用类型变量可能指向(引用)多种不同类型的对象。</p><p>多态性的使用前提：<font color =red>① 类的继承关系  ② 方法的重写</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="comment">//Object类型的变量o，指向Person类型的对象</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="title class_">Student</span>();      <span class="comment">//Object类型的变量o，指向Student类型的对象</span></span><br></pre></td></tr></table></figure><p>子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型（upcasting）。</p><p>一个引用类型变量声明为父类的类型，但引用的是子类对象，那么该变量就<font color = red>不能</font>再访问子类中<font color  = red>添加</font>的属性和方法。<font color = red>属性是在编译时确定的，编译时e为Person类型，没有成员变量school，因而编译错误。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">m.school = <span class="string">&quot;pku&quot;</span>;  <span class="comment">//合法,Student类有school成员变量</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">e.school = <span class="string">&quot;pku&quot;</span>;  <span class="comment">//非法,Person类没有school成员变量</span></span><br></pre></td></tr></table></figure><p>多态性应用举例：方法声明的形参类型为父类类型，可以使用子类的对象作为实参调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Person e)</span> &#123;</span><br><span class="line">        <span class="comment">// ……</span></span><br><span class="line">        e.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Stirng args[])</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        t.method(m); <span class="comment">// 子类的对象m传送给父类类型的参数e</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟方法调用-Virtual-Method-Invocation"><a href="#虚拟方法调用-Virtual-Method-Invocation" class="headerlink" title="虚拟方法调用(Virtual Method Invocation)"></a>虚拟方法调用(Virtual Method Invocation)</h3><p> 正常的方法调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.getInfo();</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p.getInfo();</span><br></pre></td></tr></table></figure><p>虚拟方法调用(多态情况下)：<br><font color = red>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译时e为Person类型，而方法的调用是在运行时确定的，所以调用的是Student类的getInfo()方法。——动态绑定</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">e.getInfo(); <span class="comment">//调用Student类的getInfo()方法</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img.susin3x.cn/images/202302241812950.svg" alt="虚拟方法调用举例"></p><p><b>前提：</b>Person类中定义了welcome()方法，各个子类重写了welcome()。<br><b>执行：</b>多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。</p><table><thead><tr><th align="center"><font color = red>多态作用</font></th><th align="center">提高了代码的通用性，常称作接口重用</th></tr></thead><tbody><tr><td align="center"><font color = red><strong>前提</strong></font></td><td align="center"><strong>1.需要存在继承或者实现关系<br/>2.有方法的重写</strong></td></tr><tr><td align="center"><font color = red><strong>成员方法</strong></font></td><td align="center"><strong>编译时：要查看引用变量所声明的类中是否有所调用的方法。<br/>运行时：实际调用new的对象所属的类中的重写方法。<br />编译，看左边；运行，看右边。</strong></td></tr><tr><td align="center"><font color = red><strong>成员变量</strong></font></td><td align="center"><strong>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</strong></td></tr></tbody></table><h3 id="对象类型转换-Casting"><a href="#对象类型转换-Casting" class="headerlink" title="对象类型转换 (Casting )"></a>对象类型转换 (Casting )</h3><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。<font color = red>子类特有的属性和方法不能调用</font>。如何才能调用子类特有的属性和方法？向下转型：使用强制类型转换符。</p><table><thead><tr><th align="center">基本数据类型的Casting</th><th align="center">对象类型的Casting</th></tr></thead><tbody><tr><td align="center">自动类型转换：小的数据类型可以自动转换成大的数据类型<br/>如long g=20; double d=12.0f</td><td align="center">向上转型：多态</td></tr><tr><td align="center">强制类型转换：<br />可以把大的数据类型强制转换(casting)成小的数据类型<br/>如 float f=(float)12.0; int a=(int)1200L</td><td align="center">向下转型：<br />对Java对象的强制类型转换称为造型，<br/>从父类到子类的类型转换必须通过造型实现</td></tr></tbody></table><p><font color = red>无继承关系的引用类型间的转换是非法的</font>，在造型前可以使用instanceof操作符测试一个对象的类型。</p><p><img data-src="https://img.susin3x.cn/images/202302251033777.svg" alt="casting"></p><h4 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h4><p>x instanceof A：<font color = red>检验x是否为类A的对象</font>，boolean型。如果是返回true，如果不是返回false。</p><p>使用情境：为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果 a instanceof A返回true,则 a instanceof B也返回true。其中，类B是类A的父类。</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"><span class="keyword">if</span>(p <span class="keyword">instanceof</span> Woman)&#123;</span><br><span class="line">    <span class="type">Woman</span> <span class="variable">w</span> <span class="operator">=</span> (Woman)p;</span><br><span class="line">    w1.goShopping();</span><br><span class="line">    System.out.println(<span class="string">&quot;******Woman******&quot;</span>); <span class="comment">//不输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p <span class="keyword">instanceof</span> Man)&#123;</span><br><span class="line">    <span class="type">Man</span> <span class="variable">m</span> <span class="operator">=</span> (Man)p;</span><br><span class="line">    m.earnMoney();</span><br><span class="line">    System.out.println(<span class="string">&quot;******Man******&quot;</span>);   <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;******Person******&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p <span class="keyword">instanceof</span> Object)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;******Object******&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问题一：编译时通过，运行时不通过</span></span><br><span class="line"><span class="comment">//举例一：</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"><span class="type">Man</span> <span class="variable">m1</span> <span class="operator">=</span> (Man)p1;</span><br><span class="line"><span class="comment">//举例二：</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Man</span> <span class="variable">m2</span> <span class="operator">=</span> (Man)p2</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题二：编译通过，运行时也通过</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> (Person)obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题三：编译不通过</span></span><br><span class="line"><span class="type">Man</span> <span class="variable">m3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> (String)o;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><p>1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中：<font color = red>编译看左边，运行看右边。</font></p><p>2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量：<font color = red>编译运行都看左边。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(s.count);<span class="comment">//20</span></span><br><span class="line">        s.display();<span class="comment">//20</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> s;<span class="comment">//多态性</span></span><br><span class="line">        <span class="comment">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span></span><br><span class="line">        System.out.println(b == s);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b.count);<span class="comment">//10</span></span><br><span class="line">        b.display();<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><p><img data-src="https://img.susin3x.cn/images/202302251421822.svg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Person e)</span>&#123;<span class="comment">//Person e = new Student;</span></span><br><span class="line">        System.out.println(e.getInfo());<span class="comment">//虚拟方法调用</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> Graduate)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a graduate student&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(e instance Student)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a student&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(e instance Person)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a person&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">InstanceTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstanceTest</span>();</span><br><span class="line">        test.method(<span class="keyword">new</span> <span class="title class_">Student</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h4><p>定义三个类，父类GeometricObject代表几何形状，子类Circle代表圆形，MyRectangle代表矩形。定义一个测试类GeometricTest，编写equalsArea方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术），编写displayGeometricObject方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。</p><p><img data-src="https://img.susin3x.cn/images/202302251737725.svg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeometricTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">GeometricTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeometricTest</span>();</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>, <span class="string">&quot;粉&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">MyRectangle</span> <span class="variable">myRectangle</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRectangle</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="string">&quot;黄&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEquals</span> <span class="operator">=</span> test.equalsArea(circle, myRectangle);</span><br><span class="line">        System.out.println(isEquals);</span><br><span class="line">        </span><br><span class="line">        test.displayGeometricObject(circle);</span><br><span class="line">        test.displayGeometricObject(myRectangle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试两个对象的面积是否相等</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equalsArea</span><span class="params">(GeometricObject circle,GeometricObject myRectangle)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> circle.findArea() == myRectangle.findArea();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示对象的面积</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayGeometricObject</span><span class="params">(GeometricObject area)</span>&#123;</span><br><span class="line">        System.out.println(area.findArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>1.谈谈你对多态性的理解？</strong><br>① 实现代码的通用性。<br>② Object类中定义的public boolean equals(Object obj){  }<br>  JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)<br>③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）</p><p><strong>2.多态是编译时行为还是运行时行为？如何证明？    <font color = red>多态是运行时行为</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//证明如下：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal eat food&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat eat fish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eat bone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sheep eat grass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterviewTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal  <span class="title function_">getInstance</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        <span class="type">Animal</span>  <span class="variable">animal</span> <span class="operator">=</span> getInstance(key);</span><br><span class="line">        animal.eat(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//考查多态的笔试题目：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterviewTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base1</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub1</span>();</span><br><span class="line">        base.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//sub_1重写虚拟方法调用    </span></span><br><span class="line">        <span class="type">Sub1</span> <span class="variable">s</span> <span class="operator">=</span> (Sub1)base;</span><br><span class="line">        s.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//sub_2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>... arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub1</span> <span class="keyword">extends</span> <span class="title class_">Base1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub_1&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub_2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要学习了继承和多态， 继承和重写是多态使用的前提。要区分方法重写（表现为多态性）和方法重载（不表现为多态性），多态是运行时行为，要等到方法调用的那一刻，才能确定所要调用的具体方法。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day10</title>
    <link href="https://susin3x.cn/posts/b0c21ab7.html"/>
    <id>https://susin3x.cn/posts/b0c21ab7.html</id>
    <published>2022-02-06T14:51:20.000Z</published>
    <updated>2023-05-14T03:11:00.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eclipse的快捷键使用"><a href="#Eclipse的快捷键使用" class="headerlink" title="Eclipse的快捷键使用"></a>Eclipse的快捷键使用</h2><table><thead><tr><th align="center">快捷键</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">alt + /</td><td align="center">补全代码的声明</td></tr><tr><td align="center">ctrl + 1</td><td align="center">快速修复</td></tr><tr><td align="center">ctrl + shift + o</td><td align="center">批量导包</td></tr><tr><td align="center">ctrl + /</td><td align="center">使用单行注释</td></tr><tr><td align="center">ctrl + shift + /</td><td align="center">使用多行注释</td></tr><tr><td align="center">ctrl + shift + \</td><td align="center">取消多行注释</td></tr><tr><td align="center">ctrl + alt + down 或<br>ctrl + alt + up</td><td align="center">复制指定行的代码</td></tr><tr><td align="center">ctrl + d</td><td align="center">删除指定行的代码</td></tr><tr><td align="center">alt + up 或<br />alt + down</td><td align="center">上下移动代码</td></tr><tr><td align="center">shift + enter</td><td align="center">切换到下一行代码空位</td></tr><tr><td align="center">ctrl + shift + enter</td><td align="center">切换到上一行代码空位</td></tr><tr><td align="center">ctrl + 选中指定的结构<br />ctrl + shift + t</td><td align="center">查看源码</td></tr><tr><td align="center">alt + left 或<br />鼠标后侧键</td><td align="center">退回到前一个编辑的页面</td></tr><tr><td align="center">alt + right或<br />鼠标前侧键</td><td align="center">进入到下一个编辑的页面（针对于上面那条来说）</td></tr><tr><td align="center">ctrl + t</td><td align="center">光标选中指定的类，查看继承树结构</td></tr><tr><td align="center">ctrl + c</td><td align="center">复制代码</td></tr><tr><td align="center">ctrl + z</td><td align="center">撤销</td></tr><tr><td align="center">ctrl + y</td><td align="center">反撤销</td></tr><tr><td align="center">ctrl + x</td><td align="center">剪切</td></tr><tr><td align="center">ctrl + v</td><td align="center">粘贴</td></tr><tr><td align="center">ctrl + s</td><td align="center">保存</td></tr><tr><td align="center">ctrl + a</td><td align="center">全选</td></tr><tr><td align="center">ctrl + shift + f<br />(和繁简切换冲突，我已经自定义成 shift + f)</td><td align="center">格式化代码</td></tr><tr><td align="center">tab</td><td align="center">选中数行，整体往后移动</td></tr><tr><td align="center">shift + tab</td><td align="center">选中数行，整体往前移动</td></tr><tr><td align="center">ctrl + o</td><td align="center">在当前类中，显示类结构，并支持搜索指定的方法、属性等</td></tr><tr><td align="center">alt  + shift + r</td><td align="center">批量修改指定的变量名、方法名、类名等</td></tr><tr><td align="center">ctrl + shift + x</td><td align="center"><font color = red>选中</font>的结构大小写切换（变成大写）</td></tr><tr><td align="center">ctrl + shift + y</td><td align="center"><font color = red>选中</font>的结构大小写切换（变成小写）</td></tr><tr><td align="center">alt + shift + s</td><td align="center">调出生成getter/setter/构造器等结构</td></tr><tr><td align="center">alt + enter</td><td align="center">显示当前选择资源（工程 or  文件）的属性</td></tr><tr><td align="center">ctrl + k</td><td align="center">快速查找（参考选中的Word快速定位到下一个）</td></tr><tr><td align="center">ctrl + w</td><td align="center">关闭当前窗口</td></tr><tr><td align="center">ctrl + shift + w</td><td align="center">关闭所有窗口</td></tr><tr><td align="center">ctrl + alt + g</td><td align="center">查看指定的结构使用过的地方</td></tr><tr><td align="center">ctrl + f</td><td align="center">查找与替换</td></tr><tr><td align="center">ctrl + m</td><td align="center">最大化当前的View</td></tr><tr><td align="center">home</td><td align="center">直接定位到当前行的首位</td></tr><tr><td align="center">end</td><td align="center">直接定位到当前行的末位</td></tr></tbody></table><h2 id="项目二：客户信息管理软件"><a href="#项目二：客户信息管理软件" class="headerlink" title="项目二：客户信息管理软件"></a>项目二：客户信息管理软件</h2><p>模拟实现基于文本界面的《客户信息管理软件》，该软件能够实现对客户对象的插入、修改和删除（用数组实现），并能够打印客户明细表。项目采用分级菜单方式，主菜单如下：</p><p><img data-src="https://img.susin3x.cn/images/202207130025456.png"></p><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><p>📌 每个客户的信息被保存在Customer对象中。<br>📌 以一个Customer类型的数组来记录当前所有的客户。<br>📌 每次“添加客户”（菜单1）后，客户（Customer）对象被添加到数组中。<br>📌 每次“修改客户”（菜单2）后，修改后的客户（Customer）对象替换数组中原对象。<br>📌 每次“删除客户”（菜单3）后，客户（Customer）对象被从数组中清除。<br>📌 执行“客户列表 ”（菜单4）时，将列出数组中所有客户的信息。</p><p>“添加客户”的界面及操作过程如下所示：</p><p><img data-src="https://img.susin3x.cn/images/202207141035993.png"></p><p>“修改客户”的界面及操作过程如下所示：</p><p><img data-src="https://img.susin3x.cn/images/202207141030144.png"></p><p>“删除客户”的界面及操作过程如下所示：</p><p><img data-src="https://img.susin3x.cn/images/202207141036744.png"></p><p>“客户列表”的界面及操作过程如下所示：</p><p><img data-src="https://img.susin3x.cn/images/202207141037665.png"></p><h3 id="软件设计结构"><a href="#软件设计结构" class="headerlink" title="软件设计结构"></a>软件设计结构</h3><p>该软件由以下三个模块组成：</p><p><img data-src="https://img.susin3x.cn/images/202207141125529.svg" alt="软件设计结构"></p><p>CustomerView为主模块，负责菜单的显示和处 理用户操作。CustomerList为Customer对象的管理模块，内部用数组管理一组Customer对象，并提供相应的添加、修改、删除和遍历方法，供CustomerView调用。Customer为实体对象，用来封装客户信息。</p><p><img data-src="https://img.susin3x.cn/images/202207141456928.svg" alt="enterMainMenu()的活动图"></p><h3 id="工具类CMUtility-java"><a href="#工具类CMUtility-java" class="headerlink" title="工具类CMUtility.java"></a>工具类CMUtility.java</h3><p>项目二中提供了CMUtility.java类，可用来方便地实现键盘访问，该类提供了以下静态方法：</p><table><thead><tr><th align="center">CMUtility.java类的静态方法</th></tr></thead><tbody><tr><td align="center"><font color = blue>public static char readMenuSelection()</font>：</td></tr><tr><td align="center">该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回，返回值为用户键入字符。</td></tr><tr><td align="center"><font color = blue>public static char readChar() 和<br /> public static char readChar(char defaultValue)</font>：</td></tr><tr><td align="center">这两个方法功能相同，均从键盘读取一个字符，并将其作为方法的返回值。如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。（提示：此方法可在修改客户时调用）</td></tr><tr><td align="center"><font color = blue>public static int readInt()和<br />public static int readInt(int defaultValue)</font>：</td></tr><tr><td align="center">这两个方法功能相同，均从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</td></tr><tr><td align="center"><font color = blue>public static String readString(int limit)和<br />public static String readString(int limit,String defaultValue)</font>：</td></tr><tr><td align="center">这两个方法功能相同，均从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。limit指定字符串的最大长度，如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</td></tr><tr><td align="center"><font color = blue>public static char readConfirmSelection()</font>：</td></tr><tr><td align="center">从键盘读取‘Y’或’N’，并将其作为方法的返回值。</td></tr></tbody></table><h3 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h3><p>Customer类：</p><table><thead><tr><th align="center">Customer类用来封装客户信息，该类封装客户的以下信息</th></tr></thead><tbody><tr><td align="center">String name ：客户姓名<br/>char gender ：性别<br/>int age ：年龄<br/>String phone ：电话号码<br/>String email ：电子邮箱<br/>提供各属性的get/set方法<br/>提供所需的构造器</td></tr></tbody></table><p>CustomerList类：</p><table><thead><tr><th align="center">CustomerList类的成员</th><th align="center">详细</th></tr></thead><tbody><tr><td align="center">属性</td><td align="center">Customer[] customers ：用来保存客户对象的数组<br />int total = 0 ：记录已保存客户对象的数量</td></tr><tr><td align="center">构造器</td><td align="center"><font color = blue>public CustomerList(int totalCustomer)</font>：<br />📌 用途：初始化customers数组；<br />📌 参数：totalCustomer：指定customers数组的最大空间。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public boolean addCustomer(Customer customer)</font>：<br />📌 用途：将参数customer添加到数组中最后一个客户对象记录之后；<br />📌 参数：customer指定要添加的客户对象；<br />📌 返回：添加成功返回true；false表示数组已满，无法添加。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public boolean replaceCustomer(int index, Customer customer)</font>：<br />📌 用途：用参数customer替换数组中由index指定的对象；<br />📌 参数：customer指定替换的新客户对象，<br />index指定所替换对象在数组中的位置，从0开始；<br />📌 返回：替换成功返回true；false表示索引无效，无法替换。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public boolean deleteCustomer(int index)</font>：<br />📌 用途：从数组中删除参数index指定索引位置的客户对象记录；<br />📌 参数： index指定所删除对象在数组中的索引位置，从0开始；<br />📌 返回：删除成功返回true；false表示索引无效，无法删除。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public Customer[] getAllCustomers()</font>：<br />📌 用途：返回数组中记录的所有客户对象；<br />📌 返回： Customer[] 数组中包含了当前所有客户对象，该数组长度与对象个数相同。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public Customer getCustomer(int index)</font>：<br />📌 用途：返回参数index指定索引位置的客户对象记录；<br />📌 参数： index指定所要获取的客户在数组中的索引位置，从0开始；<br />📌 返回：封装了客户信息的Customer对象。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public int getTotal()</font>：<br />📌 用途：返回total的值。</td></tr></tbody></table><p>CustomerView类：</p><table><thead><tr><th align="center">CustomerView类的成员</th><th align="center">详细</th></tr></thead><tbody><tr><td align="center">属性</td><td align="center">CustomerList customerList = new CustomerList(10);<br />创建最大包含10个客户对象的CustomerList 对象，供以下各成员方法使用。</td></tr><tr><td align="center">构造器</td><td align="center"><font color = blue>public CustomerView()</font>：<br />📌 用途：创建一个名叫“张三”的Customer对象。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public void enterMainMenu()</font>：<br />📌 用途：显示主菜单，响应用户输入，根据用户操作分别调用其他相应的成员方法（如addNewCustomer），以完成客户信息处理。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>private void addNewCustomer()</font>：<br /><font color = blue>private void modifyCustomer()</font>：<br /><font color = blue>private void deleteCustomer()</font>：<br /><font color = blue>private void listAllCustomers()</font>：<br />📌 用途：这四个方法分别完成“添加客户”、“修改客户”、<br />“删除客户”和“客户列表”等各菜单功能。</td></tr><tr><td align="center">方法</td><td align="center"><font color = blue>public static void main(String[] args)</font>：<br />📌 用途：创建CustomerView实例，并调用 enterMainMenu()方法以执行程序。</td></tr></tbody></table><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;  <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String email;  <span class="comment">//电子邮箱</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name,<span class="type">char</span> gender,<span class="type">int</span> age,String phone,String email)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerList</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> Customer[] customers;<span class="comment">//用来保存客户对象的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;           <span class="comment">//记录已保存客户对象的数量</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerList</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerList</span><span class="params">(<span class="type">int</span> totalCustomer)</span>&#123;</span><br><span class="line">        customers = <span class="keyword">new</span> <span class="title class_">Customer</span>[totalCustomer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addCustomer</span><span class="params">(Customer customer)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(total &gt;= customers.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        customers[total++] = customer;<span class="comment">//增加客户total要加一</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">replaceCustomer</span><span class="params">(<span class="type">int</span> index,Customer customer)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= total)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        customers[index] = customer;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteCustomer</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= total)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i &lt; total-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            customers[i] = customer[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        customer[--total] = <span class="literal">null</span>;<span class="comment">//最后一个元素要置为null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Customer[] getAllCustomers()&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>[total];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; total;i++)&#123;</span><br><span class="line">            customer[i] = customers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getCustomer</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= total)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//customers数组的其他位置没有存数据，返回null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> customers[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerView</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CustomerList</span> <span class="variable">customerList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerList</span>(<span class="number">10</span>);<span class="comment">//创建最大包含10个客户对象的CustomerList 对象</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerView</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="number">30</span>,<span class="string">&quot;010-56253825&quot;</span>,<span class="string">&quot;abc@email.com&quot;</span>);</span><br><span class="line">        customerList.addCustomer(customer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enterMainMenu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(isFlag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n-----------------客户信息管理软件-----------------\n&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   1 添 加 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   2 修 改 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   3 删 除 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   4 客 户 列 表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   5 退       出\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;                   请选择(1-5)：&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">menu</span> <span class="operator">=</span> CMUtility.readMenuSelection();</span><br><span class="line">            <span class="keyword">switch</span>(menu)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                addNewCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                modifyCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                deleteCustomer();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                listAllCustomers();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;\n确定是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                <span class="type">char</span> <span class="variable">isExit</span> <span class="operator">=</span> CMUtility.readConfirmSelection();</span><br><span class="line">                <span class="keyword">if</span>(isExit == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                    isFlag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addNewCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n---------------------添加客户---------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> CMUtility.readString(<span class="number">10</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;性别：&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> CMUtility.readChar();</span><br><span class="line">        System.out.print(<span class="string">&quot;年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> CMUtility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> CMUtility.readString(<span class="number">30</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;邮箱：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> CMUtility.readString(<span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(name,gender,age,phone,email);<span class="comment">//将上述数据封装到对象中</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAdd</span> <span class="operator">=</span> customerList.addCustomer(customer);</span><br><span class="line">        <span class="keyword">if</span>(isAdd)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------添加完成---------------------&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------客户目录已满,添加失败---------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n---------------------修改客户---------------------&quot;</span>);</span><br><span class="line">        Customer customer;</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待修改客户编号(-1退出)：&quot;</span>);</span><br><span class="line">            number = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span>(number == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            customer = customerList.getCustomer(number - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(customer == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法找到指定客户！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//找到了相应编号的客户</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改客户信息</span></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名(&quot;</span> + customer.getName() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> CMUtility.readString(<span class="number">10</span>,customer.getName());</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;性别(&quot;</span> + customer.getGender() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> CMUtility.readChar(customer.getGender());</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;年龄(&quot;</span> + customer.getAge() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> CMUtility.readInt(customer.getAge());</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;电话(&quot;</span> + customer.getPhone() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> CMUtility.readString(<span class="number">30</span>,customer.getPhone());</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;邮箱(&quot;</span> + customer.getEmail() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> CMUtility.readString(<span class="number">30</span>,customer.getEmail());</span><br><span class="line">        </span><br><span class="line">        Customer = <span class="keyword">new</span> <span class="title class_">Customer</span>(name,gender,age,phone,email);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isReplaced</span> <span class="operator">=</span> customerList.replaceCustomer(number-<span class="number">1</span>,Customer);</span><br><span class="line">        <span class="keyword">if</span>(isReplaced)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------修改完成---------------------&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------修改失败---------------------&quot;</span>);<span class="comment">//其实是无法执行到这条语句的</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n---------------------删除客户---------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        Customer customer;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待删除客户编号(-1退出)：&quot;</span>);</span><br><span class="line">            number = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span>(number == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;<span class="comment">//结束deleteCustomer()方法</span></span><br><span class="line">            &#125;</span><br><span class="line">            customer = customerList.getCustomer(number-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(customer == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法找到指定客户！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到了指定的客户</span></span><br><span class="line">        System.out.println(<span class="string">&quot;确认是否删除(Y/N)：&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">isDelete</span> <span class="operator">=</span> CMUtility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span>(isDelete == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">deleteCustomer</span> <span class="operator">=</span> customerList.deleteCustomer(number-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(deleteCustomer)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;---------------------删除完成---------------------&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;--------------无法找到指定客户,删除失败--------------&quot;</span>);<span class="comment">//其实是无法执行到这条语句的</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listAllCustomers</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n---------------------------客户列表---------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> customerList.getTotal();</span><br><span class="line">        <span class="type">int</span> number;<span class="comment">//编号</span></span><br><span class="line">        <span class="keyword">if</span>(total == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有用户记录&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;编号\t姓名\t性别\t年龄\t\t电话\t\t邮箱&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; total;i++)&#123;</span><br><span class="line">                number = i + <span class="number">1</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> customerList.getCustomer(i).getName();</span><br><span class="line">                <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> customerList.getCustomer(i).getGender();</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> customerList.getCustomer(i).getAge();</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> customerList.getCustomer(i).getPhone();</span><br><span class="line">                <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> customerList.getCustomer(i).getEmail();</span><br><span class="line">                System.out.println(number + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + gender + <span class="string">&quot;\t&quot;</span> + age + <span class="string">&quot;\t\t&quot;</span> + phone + <span class="string">&quot;\t&quot;</span> + email);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------客户列表完成-------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//main方法，程序的入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">CustomerView</span> <span class="variable">custView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerView</span>();</span><br><span class="line">        custView.enterMainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要学习了Eclipse的快捷键，熟悉快捷键之后，写代码速度应该会快些🤔。还做了个小项目———《客户信息管理系统》，涉及到对属性、方法和构造器的使用，以及对数组的插入、删除和替换的使用。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day09</title>
    <link href="https://susin3x.cn/posts/d0059352.html"/>
    <id>https://susin3x.cn/posts/d0059352.html</id>
    <published>2022-02-05T06:28:17.000Z</published>
    <updated>2023-05-14T03:11:00.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象的特征之一：封装与隐藏"><a href="#面向对象的特征之一：封装与隐藏" class="headerlink" title="面向对象的特征之一：封装与隐藏"></a>面向对象的特征之一：封装与隐藏</h2><p>程序设计追求“<font color  = red>高内聚低耦合</font>”，高内聚 (类的内部数据操作细节自己完成，不允许外部干涉)；低耦合(对外仅暴露少量的方法用于使用)。隐藏对象内部的复杂性，只对外公开简单的接口便于外界调用，从而提高系统的可扩展性和可维护性。把该隐藏的隐藏起来，该暴露的暴露出来，这就是封装性的设计思想。</p><p>当创建一个类的对象后，可以通过object.field给对象的属性赋值，赋值操作要受到属性的数据类型和存储范围的制约，除此之外没有其他的制约条件。但在实际问题中，往往需要给属性赋值加入额外的限制条件，这个条件<font color = red>不能在属性声明时体现，只能通过方法添加限制条件</font>。为了避免用户再使用object.field的方式对属性赋值，则需要将属性声明为私有的(private)，此时针对属性就体现了封装性。</p><p>java中通过将数据声明为私有的(private)，再提供公共的(public)方法：getXxx()和setXxx()实现对该属性的操作，以实现下述目的：<br>📌 隐藏一个类中不需要对外提供的实现细节；<br>📌 使用者只能通过事先定制好的方法来访问数据；<br>📌 可以方便地加入控制逻辑，限制对属性的不合理操作；<br>📌 便于修改，增强代码的可维护性。 </p><p>封装性思想具体的代码体现：<br>体现一：将类的属性xxx私化(private)，同时提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>体现二：不对外暴露的私有的方法；<br>体现三：单例模式（将构造器私有化）；<br>体现四：如果不希望类在包外被调用，可以将类设置为缺省的。</p><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p>封装性的体现，需要权限修饰符来配合。权限修饰符（权限从小到大排列）private，缺省、protected、public置于<font color = red>类的成员定义前</font>，用来限定对象对该类成员的访问权限。</p><table><thead><tr><th align="center">修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包的子类</th><th align="center">同一个工程</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">缺省</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><p>4种权限修饰符可以用来修饰类的内部结构（属性、方法、构造器、内部类、代码块&lt;不可修饰&gt;）</p><p><img data-src="https://img.susin3x.cn/images/202207042339949.svg" alt="权限修饰符"></p><p>对于class的权限修饰只可以用public和default(缺省)。<br>📌 public类可以在任意地方被访问。<br>📌 default类只可以被同一个包内部的类访问。</p><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建程序,在其中定义两个类：Person和PersonTest类。定义如下：用setAge()设置人的合法年龄(0~130)，用getAge()返回人的年龄。在 PersonTest 类 中 实 例 化 Person 类 的 对 象 p ，调 用 setAge()和getAge()方法，体会Java的封装性。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.setAge(<span class="number">22</span>);</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; <span class="number">130</span>)&#123;</span><br><span class="line">            <span class="comment">//throw new RuntimeException(&quot;传入的数据非法！&quot;);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;传入的数据非法！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        age = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的成员之三：构造器（构造方法）"><a href="#类的成员之三：构造器（构造方法）" class="headerlink" title="类的成员之三：构造器（构造方法）"></a>类的成员之三：构造器（构造方法）</h2><p>构造方法(创建类的对象：new+构造器)是<font color = red>与类同名且没有返回值类型的方法</font>，当创建类的对象(实例化类)时，就会<font color =  red>自动调用</font>构造方法。构造器的主要作用是<font color  = red>创建对象或者初始化对象的信息(主要是属性)</font>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器的语法格式</span></span><br><span class="line">修饰符 类名(参数列表)&#123;</span><br><span class="line">    初始化语句;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> legs;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">        legs = <span class="number">4</span>;<span class="comment">//将legs初始化为4。</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据参数不同，构造器可以分为如下两类：<br>📌 隐式无参构造器（系统默认提供）<br>📌 显式定义一个或多个构造器（无参、有参）</p><p>注意：<br>📌 Java语言中，每个类都至少有一个构造器，一个类可以创建多个重载的构造器。<br>📌 默认构造器的修饰符与所属类的修饰符一致，父类的构造器不可被子类继承。<br>📌 如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器。<br>📌 一旦显式定义了构造器，则系统不再提供默认构造器。<br>📌 构造器不能被static、final、synchronized、abstract、native修饰，不能有return语句。</p><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriAngleTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">TriAngle</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TriAngle</span>();</span><br><span class="line">        t.setNum(<span class="number">10</span>,<span class="number">2.5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的底边长是&quot;</span> + t.getBase + <span class="string">&quot;，高是&quot;</span> + t.getHeight + <span class="string">&quot;，面积是&quot;</span> + t.getArea);</span><br><span class="line">        </span><br><span class="line">        <span class="type">TriAngle</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TriAngle</span>(<span class="number">4</span>,<span class="number">2.5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三角形的底边长是&quot;</span> + t.getBase + <span class="string">&quot;，高是&quot;</span> + t.getHeight + <span class="string">&quot;，面积是&quot;</span> + t.getArea);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriAngle</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TriAngle</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">(<span class="type">double</span> b,<span class="type">double</span> h)</span>&#123;</span><br><span class="line">        base = b;</span><br><span class="line">        height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">double</span> b,<span class="type">double</span> h)</span>&#123;</span><br><span class="line">        base = b;</span><br><span class="line">        height= h;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBase</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base * height * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性赋值过程"><a href="#属性赋值过程" class="headerlink" title="属性赋值过程"></a>属性赋值过程</h3><p>赋值的先后顺序：① - ② - ③ - ④<br>赋值的位置：<br>① 默认初始化<br>② 显式初始化<br>③ 构造器中初始化<br>④ 通过“object.field”或“object.method”的方式赋值</p><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>JavaBean是一种由Java语言写成的可重用组件，所谓javaBean，是指符合如下标准的Java类：<br>📌 类是公共的<br>📌 有一个<font color  =  red>公共的无参的</font>构造器<br>📌 有属性，且有对应的get、set方法<br>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBean</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 属性一般定义为private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img data-src="https://img.susin3x.cn/images/202207071903317.svg" alt="类图"></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmJzbWF4LmNvbS9BL2dHZFhQOWFFZDQv">uml图的六种箭头<i class="fa fa-external-link-alt"></i></span>，注：+表示public类型，-表示private类型，#表示protected类型</p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>在java中，this关键字可以调用<font color = red>类的属性、方法和构造器</font>，this可理解为<font color  = red>当前对象</font>（当前正在操作本方法的对象称为当前对象）或<font color = red>当前正在创建的对象</font>。它在方法内部使用，即<font color = red>这个方法所属对象的引用</font>；它在构造器内部使用，表示<font color = red>该构造器正在初始化的对象</font>。</p><p>在任意方法或构造器内，如果使用当前类的成员变量或成员方法，可以在其前面添加this，增强程序的阅读性，不过通常都习惯省略this。当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须使用“this.field”来表明该变量是类的成员变量。使用this访问属性和方法时，如果在本类中未找到，<font color = red>会从父类中查找</font>。this可以作为一个类中构造器相互调用的特殊格式：</p><p>① 可以在类的构造器中使用“this(形参列表)”的方式，调用本类中重载的其他的构造器；<br>② 构造器中不能通过“this(形参列表)”的方式调用自身构造器；<br>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了“this(形参列表)”；<br>④ “this(形参列表)”必须声明在当前构造器的<font color = red>首行</font>；<br>⑤ 在类的一个构造器中，最多只能声明<font color = red>一个“this(形参列表)”</font>，用来调用其他的构造器。</p><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><p>按照如下的 UML 类图，创建相应的类，提供必要的结构，创建 BankTest 类进行测试，要求如下：</p><ul><li>在提款方法withdraw()中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示，deposit()方法表示存款。</li><li>addCustomer方法必须依照参数（姓，名）构造一个新的Customer对象，然后把它放到customer数组中。还必须把  numberOfCustomer属性的值加1。getNumOfCustomers方法返回numberofCustomer属性值。getCustomer方法返回与给出的 index参数相关的客户。</li></ul><p><img data-src="https://img.susin3x.cn/images/202207071710798.svg" alt="this关键字的练习"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">double</span> balance)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amt)</span>&#123;</span><br><span class="line">        balance += amt;</span><br><span class="line">        System.out.println(<span class="string">&quot;存款成功:&quot;</span> + amt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amt)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(balance &lt; amt)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;取款失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        balance -= amt;</span><br><span class="line">        System.out.println(<span class="string">&quot;取款成功：&quot;</span> + amt);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String f,String l)</span>&#123;</span><br><span class="line">        firstName = f;</span><br><span class="line">        lastName = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">getAccount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(Account acct)</span>&#123;</span><br><span class="line">        account  = acct;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bank</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> Customer[] customers;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfCustomer;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bank</span><span class="params">()</span>&#123;</span><br><span class="line">        customers = <span class="keyword">new</span> <span class="title class_">Customer</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCustomer</span><span class="params">(String f,String l)</span>&#123;</span><br><span class="line">        Arrays.fill(customers,<span class="keyword">new</span> <span class="title class_">Customer</span>(f,l));</span><br><span class="line">        numberOfCustomer++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumOfCustomers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfCustomer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getCustomer</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;=<span class="number">0</span> &amp;&amp; index &lt; numberOfCustomer)&#123;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Jame&quot;</span>,<span class="string">&quot;Smith&quot;</span>);</span><br><span class="line">        bank.getCustomer(numberOfCustomer - <span class="number">1</span>).setAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">2000</span>));</span><br><span class="line">        bank.getCustomer(numberOfCustomer - <span class="number">1</span>).getAccount().deposit(<span class="number">100</span>);</span><br><span class="line">        bank.getCustomer(numberOfCustomer - <span class="number">1</span>).getAccount().withdraw(<span class="number">200</span>);</span><br><span class="line">        bank.getCustomer(numberOfCustomer - <span class="number">1</span>).getAccount().withdraw(<span class="number">3000</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> bank.getCustomer(numberOfCustomer - <span class="number">1</span>).getAccount().getBalance()</span><br><span class="line">        System.out.println(<span class="string">&quot;客户&quot;</span> + bank.getCustomer(numberOfCustomer - <span class="number">1</span>).getFirstName() + bank.getCustomer(numberOfCustomer - <span class="number">1</span>).getLastName() + <span class="string">&quot;的余额是：&quot;</span> + balance);</span><br><span class="line">        </span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Fall&quot;</span>,<span class="string">&quot;Gays&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;银行客户的人数是：&quot;</span> + bank.getNumOfCustomers());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package关键字"><a href="#package关键字" class="headerlink" title="package关键字"></a>package关键字</h2><p>为了更好的实现项目中类的管理，java提出了包的概念。package语句作为java源文件的<font color  = red>第一条语句</font>，指明该文件中定义的<font color = red>类或接口</font>所在的包(若缺省该语句，则指定为无名包)。</p><ul><li>包对应于文件系统的目录，package语句中，用 “.” 来指明包(目录)的层次；</li><li>同一个包下，不能命名同名的接口、类；不同的包下，可以命名同名的接口、类；</li><li>包通常用<font color  = red>小写单词标识(xxxyyyzzz)</font>，通常使用所在公司域名的倒置：com.atguigu.xxx。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package的语法格式：package 顶层包名.子包名;</span></span><br><span class="line"><span class="comment">//举例：pack1\pack2\PackageTest.java</span></span><br><span class="line"><span class="keyword">package</span> pack1.pack2;    <span class="comment">//指定类PackageTest属于包pack1.pack2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PackageTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in method display()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包的作用：<br>📌 包帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：<font color  = blue>MVC的设计模式</font>；<br>📌 包可以包含类和子包，划分项目层次，便于管理。解决类命名冲突的问题，控制访问权限。<br>例：某航运软件系统包括：一组域对象、GUI和reports子系统</p><p><img data-src="https://img.susin3x.cn/images/202207082135665.svg" alt="航运软件系统"></p><h3 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h3><p>MVC是常用的设计模式之一，将整个程序分为三个层次：<font color = blue>视图模型层(model)，控制器层(controller)，与数据模型层(view)</font>。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p><table><thead><tr><th align="center"><font color = blue>模型层 model 主要处理数据</font></th></tr></thead><tbody><tr><td align="center">&gt;数据对象封装 model.bean/domain<br/>&gt;数据库操作类 model.dao<br/>&gt;数据库 model.db</td></tr><tr><td align="center"><font color = blue><strong>控制层 controller 处理业务逻辑</strong></font></td></tr><tr><td align="center">&gt;应用界面相关 controller.activity<br/>&gt;存放fragment  controller.fragment<br/>&gt;显示列表的适配器 controller.adapter<br/>&gt;服务相关的 controller.service<br/>&gt;抽取的基类 controller.base</td></tr><tr><td align="center"><font color = blue><strong>视图层 view 显示数据</strong></font></td></tr><tr><td align="center">&gt;相关工具类 view.utils<br/>&gt;自定义view  view.ui</td></tr></tbody></table><p><img data-src="https://img.susin3x.cn/images/202207072257019.png" alt="MVC设计模式"></p><table><thead><tr><th align="left">JDK中主要的包介绍</th></tr></thead><tbody><tr><td align="left"><font color = blue>1. java.lang</font> ——包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能。</td></tr><tr><td align="left"><font color= blue>2. java.net</font> ——包含执行与网络相关的操作的类和接口。</td></tr><tr><td align="left"><font color = blue>3. java.io</font> ——包含能提供多种输入/输出功能的类。</td></tr><tr><td align="left"><font color = blue>4. java.util</font> ——包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</td></tr><tr><td align="left"><font color = blue>5. java.text</font> ——包含了一些java格式化相关的类。</td></tr><tr><td align="left"><font color = blue>6. java.sql</font> ——包含了java进行JDBC数据库编程的相关类/接口。</td></tr><tr><td align="left"><font color= blue>7. java.awt</font> ——包含了构成抽象窗口工具集（abstract window toolkits）的多个类，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些类被用来构建和管理应用程序的图形用户界面(GUI)。</td></tr></tbody></table><h2 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h2><p>为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或<font color  = red>全部类(.*)</font>，import语句会告诉编译器到哪里去寻找类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import的语法格式：import  包名.类名;</span></span><br><span class="line"><span class="comment">//举例：import pack1.pack2.*;表示引入pack1.pack2包中的所有结构</span></span><br><span class="line"><span class="keyword">import</span>  pack1.pack2.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PackTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();   <span class="comment">//Test类在pack1.pack2包中定义</span></span><br><span class="line">        t.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>📌 在源文件中显式的使用import结构导入指定包下的类或接口；<br>📌 声明在包的声明和类的声明之间；<br>📌 如果需要导入多个类或接口，那么就并列显式多个import语句即可；<br>📌 举例：可以使用java.util.*的方式，一次性导入util包下所有的类或接口；<br>📌 如果导入的类或接口是java.lang包下的，或者是<font color = red>当前包下的，则可以省略此import语句</font>；<br>📌 如果在代码中使用不同包下的同名的类。那么就需要使用类的<font color = red>全类名</font>的方式指明调用的是哪个类；<br>📌 如果已经导入java.a包下的类。那么如果需要使用a包的子包下的类的话，仍然需要导入；<br>📌 import static：导入指定类或接口中的静态结构（属性或方法）。</p>]]></content>
    
    
    <summary type="html">主要学习了面向对象的封装性，封装性可以通过权限修饰符来体现，构造器可创建对象或初始化对象的结构，this可理解为当前对象或当前正在创建的对象，package和import能更好管理和使用包中的类。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day08</title>
    <link href="https://susin3x.cn/posts/a702a3c4.html"/>
    <id>https://susin3x.cn/posts/a702a3c4.html</id>
    <published>2022-02-04T03:45:01.000Z</published>
    <updated>2023-05-14T03:11:00.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="再谈方法"><a href="#再谈方法" class="headerlink" title="再谈方法"></a>再谈方法</h2><ul><li>方法的重载</li><li>可变形参的方法</li><li>方法参数的值传递机制❗❗❗(重要)</li><li>递归方法</li></ul><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>在<font color = red>同一个类</font>中，允许存在一个以上的<font color = red>同名</font>方法，只要它们的<font color = red>参数个数或者参数类型不同</font>即可。重载与<font color = red>方法的权限修饰符、返回值类型、形参变量名、方法体</font>没有关系，只看<font color = red>参数列表</font>，且参数列表必须不同 ( 参数个数或参数类型 ) 。调用时，根据方法参数列表的不同来区别。如下的5个方法构成了重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">double</span> x,<span class="type">double</span> y)</span>&#123;<span class="keyword">return</span> x+y;&#125;     <span class="comment">//与参数类型不同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span>&#123;<span class="keyword">return</span> x+y+z;&#125;   <span class="comment">//与参数个数不同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(String x,<span class="type">int</span> y)</span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> y,String x)</span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="comment">//如下的3个方法不能与上述5个方法构成重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;<span class="keyword">return</span> x+y;&#125;            <span class="comment">//重载与返回值类型无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span>&#123;<span class="keyword">return</span> m+n;&#125;           <span class="comment">//重载与形参变量名无关</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;<span class="keyword">return</span> x+y;&#125;          <span class="comment">//重载与权限修饰符无关</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img.susin3x.cn/images/202205241830245.png" alt="String类中的binarySearch方法重载"></p><h3 id="可变形参的方法"><a href="#可变形参的方法" class="headerlink" title="可变形参的方法"></a>可变形参的方法</h3><p>JavaSE 5.0 中提供了Varargs（variable number of arguments）机制，允许直接定义能和多个实参相匹配的形参。从而可以用一种更简单的方式，来传递个数可变的实参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a ,String[] books)</span>;</span><br><span class="line"><span class="comment">//JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a ,String…books)</span>;</span><br></pre></td></tr></table></figure><ul><li>声明格式：方法名(参数的类型名 …参数名)。</li><li>可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个，2个或多个。</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载。</li><li>可变个数形参的方法与本类中方法名相同，形参类型也相同的<font color = red>数组</font>不构成重载，二者不能共存。</li><li>方法的参数部分有可变形参时，需要把可变形参放在形参声明的最后。</li><li>在一个方法的形参位置，最多只能声明一个可变个数形参。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... strs)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//不能与上一个方法同时存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String[] strs)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错：The variable argument type String of the method show must be the last parameter</span></span><br><span class="line"><span class="comment">//show方法的变量参数类型字符串必须是最后一个参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ...strs,<span class="type">int</span> i)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="方法参数的值传递机制"><a href="#方法参数的值传递机制" class="headerlink" title="方法参数的值传递机制"></a>方法参数的值传递机制</h3><p>方法必须由其所在类或对象调用才有意义。若方法含有参数：<br>📌 形参：方法声明时的参数<br>📌 实参：方法调用时实际传给形参的参数值<br>Java方法参数的传递方式仅有<font color =  red>值传递</font>，即将实际参数值的副本传入方法内，而参数本身不受影响。<br>📌 形参是<font color = red>基本数据类型</font>：将实参基本数据类型变量的“<font color = red>数据值</font>”传递给形参。<br>📌 形参是<font color = red>引用数据类型</font>：将实参引用数据类型变量的“<font color = red>地址值</font>”传递给形参。<br><img data-src="https://img.susin3x.cn/images/202206291211090.svg" alt="引用数据类型的方法值传递"><br>📌 如果变量是基本数据类型，此时赋值的是变量所保存的数据值。<br>📌 如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><p><img data-src="https://img.susin3x.cn/images/202206291638553.svg" alt="方法参数的值传递——练习1"></p><h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        method(a,b);<span class="comment">//需要在method方法被调用之后，仅打印出a = 100,b = 200，请写出method方法的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码编写处</span></span><br><span class="line"><span class="comment">//法1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        a = a * <span class="number">10</span>;</span><br><span class="line">        b = b * <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">        System.exit(<span class="number">0</span>);<span class="comment">//终止当前运行的Java虚拟机</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//法2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="comment">//重置System.out.println()打印流</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(System.out)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;a=10&quot;</span>.equals(x))&#123;</span><br><span class="line">                    x = <span class="string">&quot;a=100&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;b=10&quot;</span>.equals(x))&#123;</span><br><span class="line">                    x = <span class="string">&quot;b=200&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">super</span>.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.setOut(ps);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> exit()方法属于System类，System这个类是在java.lang包中，我们从API文档中找到这个方法（java.lang包在系统运行中自动加载，不需要通过import这个方法，所以可以直接调用该方法）。System.exit(int  status)这个⽅法是⽤来结束当前正在运⾏中的java虚拟机。System.exit(0)是正常退出程序，⽽System.exit(1)或者⾮0，表⽰⾮正常退出程序。</p><h5 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个 int 型的数组： int[] arr = new int[]&#123;12,3,3,34,56,77,432&#125;;让数组的每个位置上的值去除以首位置的元素，得到的结果，作为该位置上的新值。遍历新的数组。</span></span><br><span class="line"><span class="comment">//错误写法：第一次循环使arr[0]变成了1，接下来的数组元素值都是除1，而不是除12</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    arr[i] = arr[i] / arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确写法1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>;i &lt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">    arr[i] = arr[i] / arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确写法2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    arr[i] /= arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">System.out.println(arr);           <span class="comment">//这里该输出什么？           大多数人答案是： 地址值</span></span><br><span class="line"> </span><br><span class="line"><span class="type">char</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span>];</span><br><span class="line">System.out.println(arr1);          <span class="comment">//这里该输出什么？           大多数人的答案是：地址值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayPrintTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arr</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr);   <span class="comment">//输出的确实是地址值</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">char</span>[] arr1  = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(arr1);  <span class="comment">//输出的是abc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个输出用的是println(Object x)方法；第二个用的是println(char x[])，<font color = orange>方法体</font>会遍历数组。</p><p><img data-src="https://img.susin3x.cn/images/202206292141936.png"></p><h5 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueTransferTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">ValueTransferTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueTransferTest</span>();</span><br><span class="line">        test.change(s1);</span><br><span class="line">        System.out.println(s1);<span class="comment">//大部分人认为是hi~~        实际是hello</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String s2)</span>&#123;</span><br><span class="line">        s2 = <span class="string">&quot;hi~~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW9mZWlmZWlfYm9vay9hcnRpY2xlL2RldGFpbHMvMTE3OTI5NDMw">在字符串常量池<i class="fa fa-external-link-alt"></i></span>，是不可变的字符序列，记住<font color = red>存的是地址值，传的就是地址值。</font></p><p><img data-src="https://img.susin3x.cn/images/202207031539732.svg" alt="练习5"></p><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>递归方法：一个方法体内调用它自身。<br>📌 方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。<br>📌 递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例1：计算1到n之间的所有自然数之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n + getSum(n-<span class="number">1</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例2：已知有一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),其中n是大于0的整数，求f(10)的值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例3：输入一个数据n，计算斐波那契数列(Fibonacci)的第n个值(1  1  2  3  5  8  13  21  34  55) </span></span><br><span class="line"><span class="comment">//规律：一个数等于前两个数之和  要求：计算斐波那契数列(Fibonacci)的第n个值，并将整个数列打印出来</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) +fibonacci(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要学习了再谈方法，方法重载即两同一不同：相同的类和方法名，不同的参数列表。可变形参允许定义能和多个实参相配的形参，形参是基本数据类型(引用数据类型)，则将实参数据值(地址值)传给形参。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day07</title>
    <link href="https://susin3x.cn/posts/37bdbe55.html"/>
    <id>https://susin3x.cn/posts/37bdbe55.html</id>
    <published>2022-02-03T09:22:43.000Z</published>
    <updated>2023-05-14T03:11:00.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>Java类及类的成员：属性、方法、构造器；代码块、内部类。</li><li>面向对象的三大特征：封装性、继承性、多态性、(抽象性)。</li><li>其它关键字：this、super、static、final、abstract、interface、package、import等。</li></ul><h3 id="面向对象（OOP）与面向过程（POP）"><a href="#面向对象（OOP）与面向过程（POP）" class="headerlink" title="面向对象（OOP）与面向过程（POP）"></a>面向对象（OOP）与面向过程（POP）</h3><p>二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</p><p>面向对象分析方法的思路和步骤：</p><ol><li>根据问题需要，选择问题所针对的<font color = red>现实世界中的实体</font>。</li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了<font color = red>概念世界中的类</font>。</li><li>把抽象的实体用计算机语言进行描述，<font color = red>形成计算机世界中类的定义</font>。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将<font color = red>类实例化成计算机世界中的对象</font>，对象是计算机世界中解决问题的最终工具。</li></ol><h3 id="java语言的基本元素：类和对象"><a href="#java语言的基本元素：类和对象" class="headerlink" title="java语言的基本元素：类和对象"></a>java语言的基本元素：类和对象</h3><p>万事万物皆对象，类(Class)和对象(Object)是面向对象的核心概念。类是对一类事物的描述，是抽象的、概念上的定义。对象是实际存在的该类事物的每个个体，因而也称为<font color = red>实例(instance)</font>。对象是由类new出来的，派生出来的。面向对象程序设计的重点是<font color  = red>类的设计</font>，类的设计其实就是<font color = red>类的成员的设计</font>。</p><p>常见的类的成员有属性（对应类中的成员变量），行为（对应类中的成员方法）。</p><ul><li>Field = 属性 = 成员变量= 域、字段</li><li>Method =  成员方法 = 函数</li><li>创建类的对象 = 类的实例化 = 实例化类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">boolean</span> isMarried;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n,<span class="type">boolean</span> m)</span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        isMarried = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字是：&quot;</span> + name + <span class="string">&quot;，是否结婚&quot;</span> + isMarried;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;HanMeiMei&quot;</span>;</span><br><span class="line">        age = <span class="number">17</span>;</span><br><span class="line">        isMarried = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">pet</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="type">float</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h3><ol><li>定义类（考虑修饰符、类名）</li><li>编写类的属性（考虑修饰符、属性类型、属性名、初始化值）</li><li>编写类的方法（考虑修饰符、返回值类型、方法名、形参等）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的语法格式</span></span><br><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">    属性声明;</span><br><span class="line">    方法声明;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：修饰符public：类可以被任意访问，类的正文要用{  }括起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ; <span class="comment">//声明私有变量 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">(<span class="type">int</span> i)</span> &#123; <span class="comment">//声明方法showAge( )</span></span><br><span class="line">        age = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h3><p>使用<font color = red>类名 对象名 = new 类名()</font>创建对象，使用“<font color = red>object name.object member</font>”的方式访问对象成员。类和对象的使用（面向对象思想落地的实现）如下：</p><ol><li>创建类，设计类的成员</li><li>创建类的对象</li><li>通过“object.field”或“object.method”调用对象的结构</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例：计算圆的面积</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();<span class="comment">//创建对象</span></span><br><span class="line">        c.radius = <span class="number">2</span>;<span class="comment">//访问属性</span></span><br><span class="line">        System.out.println(c.calculateArea()); <span class="comment">//访问并输出方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="type">double</span> radius;<span class="comment">//半径作为属性更合适</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> Math.PI * radius * radius;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static），且互不干扰。如果修改一个对象的属性a，则不影响另外一个对象属性a的值。</p><ul><li><font color = red>在一个类中的访问机制</font>：类中的方法可以直接访问类中的成员变量。<br>（例外：<font color = "#0000dc">static方法访问非static，编译不通过。</font>）</li><li><font color = red>在不同类中的访问机制</font>：先创建要访问类的对象，再用对象访问类中定义的成员。</li></ul><h4 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h4><p>编译完源程序（.java）以后，生成一个或多个字节码（.class）文件。使用JVM中类的加载器和解释器对生成的字节码文件进行解释运行，意味着需要将字节码文件对应的类加载到内存中，涉及到内存解析。</p><p><img data-src="https://img.susin3x.cn/images/202204261411995.png" alt="JVM内存结构"></p><p>JVM分为五个区域：虚拟机栈、本地方法栈、方法区、堆、程序计数器。虚拟机栈、本地方法栈、程序计数器为线程私有，方法区和堆为线程共享区。上图中已经用颜色区分，红色表示“通行”，蓝色表示停一停（需等待）。JVM不同区域的占用内存大小不同，一般情况下堆最大，程序计数器较小。</p><ul><li>堆内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在堆分配内存。在java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，对象的非static属性加载在堆中。</li><li>通常所说的栈是指虚拟机栈，虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、 short 、 int 、  long 、float 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）， <font color = red>方法执行完自动释放</font>。</li><li>方法区用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ul><p><img data-src="https://img.susin3x.cn/images/202204262225538.svg" alt="对象的内存解析"></p><h4 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h4><p>不定义对象的句柄，直接调用这个对象的方法，这样的对象叫做匿名对象。如：new Person().shout(); </p><ul><li>我们经常将匿名对象作为实参传递给一个方法调用。</li><li>匿名对象只能调用一次，如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。</li></ul><h3 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h3><p>Java类的成员有5类：属性、方法、构造器；代码块、内部类。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>语法格式：修饰符 数据类型 属性名 = 初始化值 ;说明：第一，常用的权限修饰符有：private、缺省、protected、public；其他修饰符：static、final (暂不考虑)；第二， 数据类型可以是任何基本数据类型(如int、boolean)或任何引用数据类型；第三，属性名属于标识符，符合命名规则和规范即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;                <span class="comment">//声明private变量age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Lila&quot;</span>;    <span class="comment">//声明public变量name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img.susin3x.cn/images/202204121255765.svg"></p><p> 在方法体外，类体内声明的变量称为成员变量。在方法体内部声明的变量称为局部变量。两者的相同点：</p><ul><li>定义变量的格式：数据类型  变量名 = 变量值</li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ul><table><thead><tr><th align="center">成员变量和局部变量的区别</th><th align="center">成员变量</th><th align="center">局部变量</th></tr></thead><tbody><tr><td align="center"><strong>声明的位置</strong></td><td align="center">直接声明在类的{}中</td><td align="center">方法内、方法形参、代码块内、</br>构造器形参、  构造器内</td></tr><tr><td align="center"><strong>修饰符</strong></td><td align="center">private 、 public 、缺省、</br>protected、 static 、 final 等</td><td align="center">不能用权限修饰符修饰，可以用 final 修饰</td></tr><tr><td align="center"><strong>初始化值</strong></td><td align="center">有默认初始化值</td><td align="center">没有默认初始化值，必须显式赋值，方可使用</td></tr><tr><td align="center"><strong>内存加载位置</strong></td><td align="center">堆空间（非static）或静态域内</td><td align="center">栈空间</td></tr></tbody></table><p><font color = red>两者在初始化值上的区别</font>：相同的是都有生命周期，不同的是局部变量没有默认初始化值，意味着在调用局部变量之前，除形参外均需显式赋值。特别地：形参在调用时赋值即可。</p><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。除了基本数据类型之外的变量类型都是引用类型，如昨天所学的数组。成员变量的默认初始化值和数组的默认初始化值是相同的。</p><table><thead><tr><th align="center">成员变量类型</th><th align="center">默认初始化值</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">0</td></tr><tr><td align="center">short</td><td align="center">0</td></tr><tr><td align="center">int</td><td align="center">0</td></tr><tr><td align="center">long</td><td align="center">0L</td></tr><tr><td align="center">float</td><td align="center">0.0F</td></tr><tr><td align="center">double</td><td align="center">0.0</td></tr><tr><td align="center">char</td><td align="center">0或’\u0000’</td></tr><tr><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">引用数据类型</td><td align="center">null</td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为函数或过程。将功能封装成方法是为了实现代码复用，简化代码。java中的方法不能独立存在，所有的方法必须定义在类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法的语法格式</span></span><br><span class="line">修饰符 返回值类型 方法名（参数类型 形参<span class="number">1</span>, 参数类型 形参<span class="number">2</span>, ….）｛</span><br><span class="line">方法体程序代码</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>其中修饰符为public，缺省，private，protected等，static、final、abstract 可用来修饰方法。</p><h5 id="return关键字"><a href="#return关键字" class="headerlink" title="return关键字"></a>return关键字</h5><p>return使用在方法体中，用于结束方法，或者针对于返回值类型的方法，使用”return 数据”方法返回所要的数据。注意：return关键字后面不可以声明执行语句。</p><ul><li>如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时需要使用return关键字来返回指定类型的变量或常量：“return 数据”。</li><li>如果方法没有返回值，则返回值类型用关键字void表示。通常没有返回值的方法中，就不需要使用return。如果使用，只能“return;”，仅用来结束方法。</li></ul><p><font color = red>方法中只能调用方法或属性，不可以在方法内部定义方法</font>。按照是否有形参及返回值对方法进行分类：</p><table><thead><tr><th align="center">方法分类</th><th align="center">无返回值</th><th align="center">有返回值</th></tr></thead><tbody><tr><td align="center">无形参</td><td align="center">void 方法名(){}</td><td align="center">返回值类型 方法名(){}</td></tr><tr><td align="center">有形参</td><td align="center">void 方法名(形参列表){}</td><td align="center">返回值类型 方法名(形参列表){}</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> hour)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNation</span><span class="params">(String nation)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="对象数组的内存解析"><a href="#对象数组的内存解析" class="headerlink" title="对象数组的内存解析"></a>对象数组的内存解析</h3><p>引用类型的变量，只可能存储两类值：null  或  地址值（含变量的类型）</p><p><img data-src="https://img.susin3x.cn/images/202204262234894.svg" alt="对象数组的内存解析"></p><h3 id="理解“万事万物皆对象”"><a href="#理解“万事万物皆对象”" class="headerlink" title="理解“万事万物皆对象”"></a>理解“万事万物皆对象”</h3><ol><li>在Java语言范畴中，都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构。</li><li>涉及Java与前端html、后端数据库交互时，前后端的结构在Java层面交互时都体现为类、对象。</li></ol>]]></content>
    
    
    <summary type="html">主要学习了面向对象，初步了解了面向对象的思想。类是抽象的概念，感觉很像模板，而对象则是把具体信息带入模板的实体。理解了对象创建和使用的内存解析过程，感觉学习对象就不是很难了。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
    <category term="面向对象" scheme="https://susin3x.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day06</title>
    <link href="https://susin3x.cn/posts/40ba8ec3.html"/>
    <id>https://susin3x.cn/posts/40ba8ec3.html</id>
    <published>2022-02-02T12:20:02.000Z</published>
    <updated>2023-05-14T03:11:00.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p><ul><li>数组本身是引用数据类型，数组元素可以是任何数据类型，包括基本数据类型和引用数据类型</li><li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址</li><li>数组的长度一旦确定，就不能修改</li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快</li></ul><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type <span class="keyword">var</span>[] 或type[] <span class="keyword">var</span></span><br><span class="line"><span class="type">int</span> a[];</span><br><span class="line"><span class="type">int</span>[] a1;</span><br><span class="line"><span class="type">double</span> b[];</span><br><span class="line">String[] c; <span class="comment">//引用类型变量数组</span></span><br></pre></td></tr></table></figure><h4 id="初始化方式"><a href="#初始化方式" class="headerlink" title="初始化方式"></a>初始化方式</h4><ul><li>动态初始化：数组声明且为数组元素分配空间与赋值的操作分开进行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">//int[] arr;arr = new int[3];</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><ul><li>静态初始化：在定义数组的同时就为数组元素分配空间并赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String names[] = &#123;<span class="string">&quot;李四光&quot;</span>,<span class="string">&quot;茅以升&quot;</span>,<span class="string">&quot;华罗庚&quot;</span>&#125; <span class="comment">//方式一</span></span><br><span class="line">String names[] = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;李四光&quot;</span>,<span class="string">&quot;茅以升&quot;</span>,<span class="string">&quot;华罗庚&quot;</span>&#125;         <span class="comment">//方式二</span></span><br></pre></td></tr></table></figure><h4 id="元素的引用"><a href="#元素的引用" class="headerlink" title="元素的引用"></a>元素的引用</h4><ul><li><font color = red>定义并用运算符new为之分配空间后，才可以引用数组中的每个元素</font></li><li>数组元素的引用方式：数组名[数组元素下标]</li><li>数组的角标（或索引）从0开始的，到数组的长度-1结束</li><li>每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长度(元素个数)</li></ul><h4 id="默认初始化值"><a href="#默认初始化值" class="headerlink" title="默认初始化值"></a>默认初始化值</h4><table><thead><tr><th align="center">数组元素类型</th><th align="center">元素默认初始化值</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">0</td></tr><tr><td align="center">short</td><td align="center">0</td></tr><tr><td align="center">int</td><td align="center">0</td></tr><tr><td align="center">long</td><td align="center">0L</td></tr><tr><td align="center">float</td><td align="center">0.0F</td></tr><tr><td align="center">double</td><td align="center">0.0</td></tr><tr><td align="center">char</td><td align="center">0或’\u0000’</td></tr><tr><td align="center">boolean</td><td align="center">false</td></tr><tr><td align="center">引用数据类型</td><td align="center">null</td></tr></tbody></table><h4 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h4><p><img data-src="https://img.susin3x.cn/images/202204121539696.svg" alt="一维数据内存解析"></p><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><p>从键盘读入学生成绩，找出最高分，并输出学生成绩等级。成绩&gt;=最高分-10等级为’A’ ，成绩&gt;=最高分-20等级为’B’，成绩&gt;=最高分-30    等级为’C’，其余等级为’D’。提示：先读入学生人数，根据人数创建int数组，存放学生成绩。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.使用Scanner，读取学生个数</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入学生人数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> scan.nextInt();        </span><br><span class="line">        <span class="comment">// 2.创建数组，存储学生成绩：动态初始化</span></span><br><span class="line">        <span class="type">int</span> scores[] = <span class="keyword">new</span> <span class="title class_">int</span>[number];</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span> + number + <span class="string">&quot;个成绩&quot;</span>);        </span><br><span class="line">        <span class="comment">// 3.给数组中的元素赋值，并获取数组中元素的最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxScore</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">            scores[i] = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (scores[i] &gt; maxScore) &#123;</span><br><span class="line">            maxScore = scores[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最高分是：&quot;</span> + maxScore);        </span><br><span class="line">        <span class="comment">// 4.根据每个学生成绩与最高分的差值，得到每个学生的等级，并输出等级和成绩</span></span><br><span class="line">        <span class="type">char</span> level;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxScore - scores[i] &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxScore - scores[i] &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">            level = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxScore - scores[i] &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">            level = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            level = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">            &#125;        </span><br><span class="line">            System.out.println(<span class="string">&quot;student &quot;</span> + i + <span class="string">&quot; score is &quot;</span> + scores[i] + <span class="string">&quot; grade is &quot;</span> + level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>数组属于引用数据类型，数组的元素也可以是引用数据类型。我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在，从数组底层的运行机制来看，其实没有多维数组。</p><h4 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//一维数组</span></span><br><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;<span class="comment">//静态初始化</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//动态初始化1</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][];<span class="comment">//动态初始化2</span></span><br><span class="line"><span class="comment">//也是正确的写法：</span></span><br><span class="line"><span class="type">int</span>[] arr4[] = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span>[] arr5[] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;<span class="comment">//类型推断</span></span><br></pre></td></tr></table></figure><ul><li>动态初始化</li></ul><table><thead><tr><th align="left">二维数组[][]：数组中的数组</th></tr></thead><tbody><tr><td align="left">格式1(动态初始化)：int[][] arr = new int[3][2];</td></tr><tr><td align="left">定义了名称为arr的二维数组<br />二维数组中有3个一维数组<br />每个一维数组中有2个元素<br />一维数组的名称分别为arr[0]，arr[1]，arr[2]<br />给角标为[0][1]的数组元素赋值为78：arr[0][1] = 78;</td></tr><tr><td align="left">格式2(动态初始化)：int[][] arr = new int[3][];</td></tr><tr><td align="left">二维数组中有3个一维数组<br />每个一维数组都是默认初始化值null<br />可以对这三个一维数组分别进行初始化<br />arr[0] = new int [3];     arr[1] = new int[1];     arr[2] = new int[2];<br />注：int[][] arr = new int[][3];//非法</td></tr></tbody></table><ul><li>静态初始化</li></ul><table><thead><tr><th align="left">格式3(静态初始化)</th></tr></thead><tbody><tr><td align="left">定义一个名称为arr的二维数组，二维数组中有三个一维数组<br />每一个一维数组中具体元素也已初始化<br />第一个一维数组arr[0] = {3,8,2};<br />第二个一维数组arr[1] = {2,7};<br />第三个一维数组arr[2] = {9,0,1,6};<br />第三个一维数组的长度表示方式：arr[2].length;</td></tr><tr><td align="left">注意特殊写法情况：int[] x,y[];x是一维数组，y是二维数组<br />java中多维数组不必都是规则矩阵形式</td></tr></tbody></table><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr4.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr4[i].length;j++)&#123;</span><br><span class="line">        System.out.print(arr4[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认初始化值-1"><a href="#默认初始化值-1" class="headerlink" title="默认初始化值"></a>默认初始化值</h4><ul><li>针对初始化方式一，如int[][] arr = new int[4][3]；则arr数组外层元素的初始化值为地址值，内层元素的初始化值与一维数组初始化情况相同。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr);<span class="comment">// [I@15db9742</span></span><br><span class="line"><span class="type">int</span> arr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr1);<span class="comment">// [[I@6d06d69c</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);<span class="comment">// [I@7852e922</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>针对初始化方式二，如int[][] arr = new int[4][]；则arr数组外层元素的初始化值为null；内层元素的初始化值不能调用，否则报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>[][] arr4 = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr4[<span class="number">1</span>]);<span class="comment">// null</span></span><br><span class="line">System.out.println(arr4[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//报错NullPointerException空指针异常</span></span><br></pre></td></tr></table></figure><h4 id="内存解析-1"><a href="#内存解析-1" class="headerlink" title="内存解析"></a>内存解析</h4><p><img data-src="https://img.susin3x.cn/images/202204121540327.svg" alt="二维数组内存解析"></p><h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><p>使用二维数组打印一个 10 行杨辉三角形；要求：1.第一行有 1 个元素, 第 n 行有 n 个元素；2.每一行的第一个元素和最后一个元素都是 1；3.从第三行开始, 对于非第一个元素和最后一个元素的元素。即：yangHui[i][j] = yangHui[i-1][j-1] + yangHui[i-1][j];运行结果如下：</p><p><img data-src="https://img.susin3x.cn/images/202204082135985.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] yangHui = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; yangHui.length;i++)&#123;</span><br><span class="line">            yangHui[i] = <span class="keyword">new</span> <span class="title class_">yangHui</span>[i + <span class="number">1</span>];</span><br><span class="line">            yangHui[i][<span class="number">0</span>] = yangHui[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; yangHui[i].length - <span class="number">1</span>;j++)&#123;</span><br><span class="line">                yangHui[i][j] = yangHui[i-<span class="number">1</span>][j-<span class="number">1</span>] + yangHui[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; yangHui[i].length;j++)&#123;</span><br><span class="line">                System.out.print(yangHui[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的常见算法"><a href="#数组的常见算法" class="headerlink" title="数组的常见算法"></a>数组的常见算法</h3><ul><li>数组元素的赋值(杨辉三角、回形数等)</li><li>求数值型数组中元素的最大值、最小值、平均数、总和等</li><li>数组的复制、反转、查找(线性查找、二分法查找)</li><li>数组元素的排序算法</li></ul><h4 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h4><p>定义一个int型的一维数组，包含10个元素，分别赋一些随机的整数，然后求出所有元素的最大值，最小值，和值，平均值，并输出出来。要求：所有随机数都是两位数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            arr[i] = (<span class="type">int</span>)(Math.random() * <span class="number">90</span>) + <span class="number">10</span>;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">int</span> maxValue,minValue;</span><br><span class="line">        maxValue = minValue = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxValue &lt; arr[i])&#123;</span><br><span class="line">                maxValue = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(minValue &gt; arr[i])&#123;</span><br><span class="line">                minValue = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            sum += arr[i];  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ave</span> <span class="operator">=</span> sum / arr.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有元素的最大值是：&quot;</span> + maxValue +<span class="string">&quot;;最小值是：&quot;</span> + minValue + <span class="string">&quot;；和值是：&quot;</span> + sum + <span class="string">&quot;;平均值是：&quot;</span> + ave);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习四"><a href="#练习四" class="headerlink" title="练习四"></a>练习四</h4><p>数组的复制、反转、查找（线性查找、二分法查找）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;JJ&quot;</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;AA&quot;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数组的复制(区别于数组变量的 赋值：arr1 = arr)</span></span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length;i++)&#123;</span><br><span class="line">            arr1[i] = arr[i];</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数组的反转</span></span><br><span class="line">        <span class="comment">//法1</span></span><br><span class="line">        String temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length / <span class="number">2</span>;i++)&#123;<span class="comment">//一定要除2，不然会换两次又换 回去</span></span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[arr.length - i -<span class="number">1</span>];</span><br><span class="line">            arr[arr.length - i -<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//法2</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = arr.length-<span class="number">1</span>;i &lt; j;i++,j--)&#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">//查找(或搜索)</span></span><br><span class="line">        <span class="comment">//线性查找：</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dest.equals(arr[i]))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;BB在数组arr的位置是：&quot;</span> + (i+<span class="number">1</span>));</span><br><span class="line">                isFlag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isFlag == <span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾，没有找到哦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//二分法查找：：要求查找的数组必须有序</span></span><br><span class="line">        <span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dest1</span> <span class="operator">=</span> -<span class="number">34</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//首索引位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr3.length - <span class="number">1</span>;<span class="comment">//尾索引位置</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (head + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(dest1 == arr3[middle])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;找到了指定元素，位置为：&quot;</span> + middle);</span><br><span class="line">                isFlag1 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr3[middle] &gt; dest1)&#123;</span><br><span class="line">                end = middle -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//arr3[middle] &lt; number</span></span><br><span class="line">                head = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isFlag1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾，没有找到的啦 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组元素的排序算法"><a href="#数组元素的排序算法" class="headerlink" title="数组元素的排序算法"></a>数组元素的排序算法</h4><p>假设含有n个记录的序列为{R1，R2，…,Rn}，其相应的关键字序列为{K1，K2，…,Kn}。将这些记录重新排序{Ri1,Ri2,…,Rin}，使得相应的关键字值满足条Ki1&lt;=Ki2&lt;=…&lt;=Kin，这样的一种操作称为排序。通常来说，排序的目的是快速查找。衡量排序算法的优劣有以下三点：</p><ul><li>时间复杂度：分析关键字的比较次数和记录的移动次数</li><li>空间复杂度：分析排序算法中需要多少辅助内存</li><li>稳定性：若两个记录A和B的关键字值相等，排序后的先后次序保持不变，则这种排序是稳定的</li></ul><h5 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h5><ul><li>内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</li><li>外部排序：参与排序的数据非常多，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序，可认为外部排序是由多次内部排序组成。</li></ul><p>十大内部排序算法：选择排序（直接选择排序、<font color = orange>堆排序</font>）、交换排序<font color = red>（冒泡排序、快速排序）</font>、插入排序（直接插入排序、折半插入排序、Shell希尔排序）、<font color = orange>归并排序</font>、桶式排序、基数排序。</p><p>算法的五大特征：</p><table><thead><tr><th align="center">特征</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">输入（Input）</td><td align="center">有0个或多个输入数据，这些输入必须有清楚的描述和定义</td></tr><tr><td align="center">输出（Output）</td><td align="center">至少有 1 个或多个输出结果，不可以没有输出结果</td></tr><tr><td align="center">有穷性（有限性，Finiteness）</td><td align="center">算法在有限的步骤之后会自动结束而不会无限循环，<br />并且每一个步骤可以在可接受的时间内完成</td></tr><tr><td align="center">确定性（明确性，Definiteness）</td><td align="center">算法中的每一步都有确定的含义，不会出现二义性</td></tr><tr><td align="center">可行性（有效性，Effectiveness）</td><td align="center">算法的每一步都是清楚且可行的，能让用户用纸笔计算而求出答案</td></tr></tbody></table><p>满足确定性的算法称为确定性算法。现在人们关注更广泛的概念，例如考虑各种非确定性的算法，如并行算法、概率算法等。另外也关注不要求终止的计算描述，这种描述有时被称为过程（procedure）。</p><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><p>冒泡排序是一种简单的交换排序算法，以升序排序为例，其核心思想是：</p><ul><li>从第一个元素开始，比较相邻的两个元素。如果第一个比第二个大，则进行交换。</li><li>对每对相邻元素执行同样的比较操作，从开始第一对到结尾最后一对，最后的元素会是最大的数。</li><li>除了每次排序得到的最后一个元素，对剩余元素重复以上步骤，直到没有任何元素需要比较为止。</li></ul><p><img data-src="https://img.susin3x.cn/images/202204112205054.gif" alt="冒泡排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用冒泡排序，实现如下的数组从小到大排序。</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">3</span>,<span class="number">44</span>,<span class="number">38</span>,<span class="number">5</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">46</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">50</span>,<span class="number">48</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><ul><li>从数列中挑出一个元素，称为“基准”（pivot）。重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li><li>递归的最底部情形是数列的大小是零或一，也就是已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</li></ul><p><img data-src="https://img.susin3x.cn/images/202204112305722.gif" alt="快速排序"></p><p>各种排序算法性能对比如下：</p><table><thead><tr><th align="center">排序类型</th><th align="center">平均情况</th><th align="center">最好情况</th><th align="center">最坏情况</th><th align="center">辅助空间</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="center">O(n²)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O(n²)</td><td align="center">O(n²)</td><td align="center">O(n²)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">直接插入排序</td><td align="center">O(n²)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">折半插入排序</td><td align="center">O(n²)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O(n^1.3)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O(nlog₂n)</td><td align="center">O(nlog₂n)</td><td align="center">O(nlog₂n)</td><td align="center">O(n)</td><td align="center">稳定</td></tr><tr><td align="center">快速排序</td><td align="center">O(nlog₂n)</td><td align="center">O(nlog₂n)</td><td align="center">O(n²)</td><td align="center">O(nlog₂n)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O(nlog₂n)</td><td align="center">O(nlog₂n)</td><td align="center">O(nlog₂n)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O(n+k)</td><td align="center">O(n)</td><td align="center">O(n²)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr><tr><td align="center">基数排序</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n*k)</td><td align="center">O(n+k)</td><td align="center">稳定</td></tr></tbody></table><p>各种内部排序方法性能比较：</p><p>(1)从平均时间而言：快速排序最佳，但在最坏情况下时间性能不如堆排序和归并排序。<br>(2)从算法简单性看：由于选择排序、直接插入排序和冒泡排序的算法比较简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序算法，其算法比较复杂，认为是复杂排序。<br>(3)从稳定性看：冒泡排序、直接插入排序和归并排序稳定。选择排序、快速排序、 希尔排序不稳定。<br>(4)从待排序的记录数n的大小看：n较小时，宜采用简单排序；而n较大时宜采用改进排序。</p><p>排序算法的选择：</p><p>(1)若n较小(如n≤50)，可采用直接插入或直接选择排序。当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。<br>(2)若文件初始状态基本有序(指正序)，则应选用直接插入、冒泡或随机的快速排序为宜。<br>(3)若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。</p><h3 id="Arrays工具类的使用"><a href="#Arrays工具类的使用" class="headerlink" title="Arrays工具类的使用"></a>Arrays工具类的使用</h3><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">boolean equals(int[] a,int[] b)</td><td align="center">判断两个数组是否相等</td></tr><tr><td align="center">String toString(int[] a)</td><td align="center">输出数组信息</td></tr><tr><td align="center">void fill(int[] a,int val)</td><td align="center">将指定值填充到数组之中</td></tr><tr><td align="center">void sort(int[] a)</td><td align="center">对数组进行排序</td></tr><tr><td align="center">int binarySearch(int[] a,int key)</td><td align="center">对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. boolean equals(int[] a,int[] b) 判断两个数组是否相等。</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEquals</span> <span class="operator">=</span> Arrays.equals(arr1,arr2);</span><br><span class="line">System.out.println(isEquals);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. String toString(int[] a) 输出数组信息。</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));<span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. void fill(int[] a,int val) 将指定值填充到数组之中。</span></span><br><span class="line">Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));<span class="comment">//[10, 10, 10, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. void sort(int[] a) 对数组进行排序。</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));<span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. int binarySearch(int[] a,int key) 对排序后的数组进行二分法检索指定的值。</span></span><br><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr3,<span class="number">211</span>);<span class="comment">//未找到</span></span><br><span class="line"><span class="keyword">if</span>(index &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组使用中的常见异常"><a href="#数组使用中的常见异常" class="headerlink" title="数组使用中的常见异常"></a>数组使用中的常见异常</h3><p>编译时不报错，运行时报错，一旦程序出现异常就终止执行。</p><p><img data-src="https://img.susin3x.cn/images/202204120008172.png"></p><table><thead><tr><th align="left"><font color = red>数组脚标越界异常(ArrayIndexOutOfBoundsException)</font></th></tr></thead><tbody><tr><td align="left">int[] arr1 = new int[2];<br/>System.out.println(arr1[2]);//右边越界<br/>System.out.println(arr1[-1]);//左边越界<br/>访问到了数组中的不存在的脚标时发生。</td></tr><tr><td align="left"><font color = red><strong>空指针异常(NullPointerException)</strong></font></td></tr><tr><td align="left">int[] arr2 = new int[]{1,2,3};<br />arr2 = null;<br />System.out.println(arr2[0]);//空指针异常<br />arr引用没有指向实体，却在操作实体中的元素时。</td></tr><tr><td align="left">String[] arr3 = new String[]{“AA”,“BB”,“CC”};<br />arr3[0] = null;<br />System.out.println(arr3[0].toString());//空指针异常，输出arr3[0]的内容</td></tr><tr><td align="left">int[][] arr4 = new int[3][];<br />System.out.println(arr4);//地址值<br />System.out.println(arr4[0]);//null<br />System.out.println(arr4[0][0]);//空指针异常</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">主要学习了数组和数组的算法，在学习数组内存解析后对数组的声明和初始化有更清楚的认识，数组存放的是null或地址值。二维数组可看成是一维数组array1作为另一个一维数组array2的元素而存在。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day05</title>
    <link href="https://susin3x.cn/posts/d9b3df79.html"/>
    <id>https://susin3x.cn/posts/d9b3df79.html</id>
    <published>2022-02-01T12:19:58.000Z</published>
    <updated>2023-05-14T03:11:00.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目一"><a href="#项目一" class="headerlink" title="项目一"></a>项目一</h2><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><ul><li>模拟实现基于文本界面的《家庭记账软件》</li><li>该软件能够记录家庭的收入、支出，并能够打印收支明细表</li><li>项目采用分级菜单方式，主菜单如下：</li></ul><p><img data-src="https://img.susin3x.cn/images/202202281814424.png"></p><h4 id="详细需求"><a href="#详细需求" class="headerlink" title="详细需求"></a>详细需求</h4><ul><li>假设家庭起始的生活基本金为10000元</li><li>每次登记收入（菜单2）后，收入的金额应累加到基本金并记录本次收入明细，以便后续的查询</li></ul><p><img data-src="https://img.susin3x.cn/images/202202281814423.png"></p><ul><li>每次登记支出（菜单3）后，支出的金额应从基本金中扣除并记录本次支出明细，以便后续的查询</li></ul><p><img data-src="https://img.susin3x.cn/images/202202281814816.png"></p><ul><li>查询收支明细（ 菜单1）时，将显示所有的收入、支出名细列表</li></ul><p><img data-src="https://img.susin3x.cn/images/202202281814000.png"></p><h3 id="工具类Utility-java"><a href="#工具类Utility-java" class="headerlink" title="工具类Utility.java"></a>工具类Utility.java</h3><p>将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。在 Utility.java 工具类中提供了以下静态方法</p><ul><li>public static char readMenuSelection()：用于界面菜单的选择。该方法读取键盘，如果用户键入“1” - “4”中的任意字符，则方法返回。返回值为用户键入字符</li><li>public static int readNumber()：用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值</li><li>public static String readString()：用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值</li><li>public static char readConfirmSelection()：用于确认选择的输入。该方法从键盘读取“Y”或“N”，并将其作为方法的返回值</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FamilyAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">banlance</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">detail</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(isFlag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n-----------------家庭收支记账软件-----------------\n&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   1 收支明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   2 登记收入&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   3 登记支出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                   4 退    出\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;                   请选择（1-4）：&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">selection</span> <span class="operator">=</span> Utility.readMenuSelection();</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">switch</span>(selection)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;-----------------当前收支明细记录-----------------&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;收支    账户余额        收支金额        说    明&quot;</span>);</span><br><span class="line">                System.out.print(detail);</span><br><span class="line">                System.out.println(<span class="string">&quot;\n--------------------------------------------------&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;本次收入金额：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">addMoney</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">                System.out.print(<span class="string">&quot;本次收入说明：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">addInfo</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line">                balance += addMoney</span><br><span class="line">                detail += <span class="string">&quot;收入\t&quot;</span> + balance + <span class="string">&quot;\t\t&quot;</span> + addMoney + <span class="string">&quot;\t\t&quot;</span> + addInfo + <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;本次支出金额：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">subMoney</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">                System.out.print(<span class="string">&quot;本次收入说明：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">subInfo</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line">                balance -= subMoney</span><br><span class="line">                detail += <span class="string">&quot;收入\t&quot;</span> + balance + <span class="string">&quot;\t\t&quot;</span> + subMoney + <span class="string">&quot;\t\t&quot;</span> + subInfo + <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                System.out.print(<span class="string">&quot;确认是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                <span class="type">char</span> <span class="variable">isExit</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">                <span class="keyword">if</span>(isExit == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                    isFlag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：while(true) + break好像不能退出循环，最后还是使用了isFlag</p>]]></content>
    
    
    <summary type="html">这个小项目是对前四天学习的测试，while(true)实现无限循环，字符串连接符&quot;+&quot;实现每条收支明细的连接，使用Utility工具类中的toUpperCase()方法将小写字符‘y’和‘n’转换为大写。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day04</title>
    <link href="https://susin3x.cn/posts/aeb4efef.html"/>
    <id>https://susin3x.cn/posts/aeb4efef.html</id>
    <published>2022-01-31T12:19:53.000Z</published>
    <updated>2023-05-14T03:11:00.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h2><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。流程控制方式采用结构化程序设计中规定的三种基本流程结构，即顺序结构，分支结构和循环结构。</p><ul><li>顺序结构：程序从上到下逐行地执行，中间没有任何判断和跳转</li><li>分支结构：根据条件选择性地执行某段代码，有if…else和switch-case两种分支语句</li><li>循环结构：根据循环条件，重复性的执行某段代码，有while、do…while、for三种循环语句，JDK1.5提供了foreach循环，方便的遍历集合、数组元素</li></ul><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><ul><li>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量</li><li>语句块只有一条执行语句时，一对{}可以省略，但建议保留</li><li>当if-else结构是“多选一”时，最后的else是可选的，根据需要可以省略</li><li>当多个条件是“互斥”关系时，条件判断语句及执行语句间顺序无所谓</li><li>当多个条件是“包含”关系时，“小上大下 / 子上父下”</li><li>if-else语句结构，根据需要可以嵌套使用</li></ul><h5 id="if语句的三种格式"><a href="#if语句的三种格式" class="headerlink" title="if语句的三种格式"></a>if语句的三种格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式一</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行代码块；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式二</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行代码块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式三</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    执行代码块<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    执行代码块n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>1.假设你想开发一个玩彩票的游戏，程序随机地产生一个两位数的票，提示用户输入一个两位数，然后按照下面的规则判定用户是否能赢。<br>1)如果用户输入的数匹配彩票的实际顺序，奖金10 000美元<br>2)如果用户输入的所有数字匹配彩票的所有数字，但顺序不一致，奖金3000美元<br>3)如果用户输入的一个数字仅满足顺序情况下匹配彩票的一个数字，奖金1000美元<br>4)如果用户输入的一个数字仅满足非顺序情况下匹配彩票的一个数字，奖金500美元<br>5)如果用户输入的数字没有匹配任何一个数字，则彩票作废</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两位数字（10-99）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">guess</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">guessGe</span> <span class="operator">=</span> guess % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">guessShi</span> <span class="operator">=</span> guess/<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random() * <span class="number">90</span>) + <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberGe</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberShi</span> <span class="operator">=</span> number /<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(guess == number)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;奖金10000美元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessGe == numberShi &amp;&amp; numberGe == guessShi)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;奖金3000美元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessGe == numberGe || numberShi == guessShi)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;奖金1000美元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessGe == numberShi || numberGe == guessShi)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;奖金500美元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未中奖&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;中奖号码是：&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要问题是产生随机数<br>Math.random() 产生[0,1)范围的随机值<br>Math.random() * 90：[0,90)<br>Math.random() * 90 + 10：[10,100) 即得到  [10,99]<br>使用(int)(Math.random() * 90) + 10 产生一个两位数的随机数<br>公式：[a,b]：(int)(Math.random() * (b - a + 1) )+ a</p><hr><p>2.大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：<br>高：180cm以上；富：财富1千万以上；帅：是。<br>1)如果这三个条件同时满足，则：“我一定要嫁给他!!!”<br>2)如果三个条件有为真的情况，则：“嫁吧，比上不足，比下有余。”<br>3)如果三个条件都不满足，则：“不嫁！”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的身高（cm）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的财富（千万）：&quot;</span>);</span><br><span class="line">        <span class="type">Double</span> <span class="variable">wealth</span> <span class="operator">=</span> scan.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你是否帅（是/否）：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">isHandsome</span> <span class="operator">=</span> scan.next();</span><br><span class="line">        <span class="keyword">if</span>(height &gt;= <span class="number">180</span> &amp;&amp; wealth &gt;= <span class="number">1</span> &amp;&amp; isHandsome.equals(<span class="string">&quot;是&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我一定要嫁给他!!!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(height &gt;= <span class="number">180</span> || wealth &gt;= <span class="number">1</span> || isHandsome.equals(<span class="string">&quot;是&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;嫁吧，比上不足，比下有余&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不嫁！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h4><ul><li>switch(表达式)中表达式的值必须是：byte,short,char,int,枚举 (jdk 5.0),String (jdk 7.0)</li><li>case子句中的值必须是常量，不能是变量名或不确定的表达式值</li><li>同一个switch语句，所有case子句中的常量值互不相同</li><li>break是可选的，break在执行完一个case分支后使程序跳出switch语句块，如果没有break，程序会顺序执行到switch结尾</li><li>default子句是可任选，位置也是灵活的，当没有匹配的case时，执行default</li><li>如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并</li></ul><h5 id="switch-case格式"><a href="#switch-case格式" class="headerlink" title="switch-case格式"></a>switch-case格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line">… …</span><br><span class="line"><span class="keyword">case</span> 常量N:</span><br><span class="line">语句N;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h5><p>1.从键盘分别输入年、月、日，判断这一天是当年的第几天。<br>注：判断一年是否是闰年的标准：<br>1)可以被4整除，但不可被100整除<br>2)或可以被400整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exer3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入月：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入日：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumDay</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            sumDay += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            sumDay += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            sumDay += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            sumDay += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            sumDay += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            sumDay += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            sumDay += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            sumDay += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            sumDay += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span>((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            sumDay += <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sumDay += <span class="number">28</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            sumDay += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            sumDay += day;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;这一天是当年的第 &quot;</span> + sumDay + <span class="string">&quot; 天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果判断的具体数值不多，而且符合byte、short、char、int、String、枚举等几种类型，虽然if-else和switch-case都可以使用，但建议使用swtich语句，因为效率稍高。</li><li>对区间判断和结果为boolean类型判断优先选择if，if的使用范围更广。使用switch-case的，都可以改写为if-else。反之不成立。</li></ul><hr><p>2.中国的生肖基于12年一个周期，每年用一个动物代表，为一个给定的年份找出其对应的中国生肖。<br>注：2019年：猪   2019 % 12 == 3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exer4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的要查询的年份&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">shengXiao</span> <span class="operator">=</span> year % <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">switch</span> (shengXiao)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;猴年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;鸡年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;狗年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;猪年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;鼠年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;牛年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;虎年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;兔年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;龙年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;蛇年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;马年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;羊年&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;输入有错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>在某些条件满足的情况下反复执行特定代码，循环语句有for循环，while循环以及do-while循环。</p><p><img data-src="https://img.susin3x.cn/images/202202281812647.png" alt="循环结构"></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="for循环格式"><a href="#for循环格式" class="headerlink" title="for循环格式"></a>for循环格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①初始化部分;②循环条件部分;④迭代部分)&#123;</span><br><span class="line">    ③循环体部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ② - ③ - ④ -… - ②<br>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔<br>②循环条件部分为boolean类型表达式，当值为false时，退出循环<br>④可以有多个变量更新，用逗号分隔</p><h5 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h5><p>1.编写程序从1循环到150，并在每行打印一个值，另外在每个3的倍数行上打印出“foo”,在每个5的倍数行上打印“biz”,在每个7的倍数行上打印输出“baz”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exer5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">150</span>;i++)&#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;foo &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;biz &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">7</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;baz &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.输入两个正整数m和n，求其最大公约数和最小公倍数。<br>比如：12和20的最大公约数是4，最小公倍数是60<br>说明：break关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exer6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="comment">//获取最大公约数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> (m &gt;= n)? n : m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> min;i &gt;= <span class="number">1</span>;i-- )&#123;</span><br><span class="line">            <span class="keyword">if</span>(m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最大公约数是：&quot;</span> + i);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//一旦在循环中执行到break，就跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取最大公倍数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (m &gt;= n)? m : n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> max;i &lt;= m * n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最大公倍数是：&quot;</span> + i);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//一旦在循环中执行到break，就跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><h5 id="while循环格式"><a href="#while循环格式" class="headerlink" title="while循环格式"></a>while循环格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分</span><br><span class="line"><span class="keyword">while</span>(②循环条件部分)｛</span><br><span class="line">③循环体部分;</span><br><span class="line">④迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ② - ③ - ④ -… - ②<br>注意不要忘记声明④迭代部分，否则循环将不能结束，变成死循环<br>for循环和while循环：<br>1.for循环和while循环是可以相互转换的<br>2.for循环和while循环的区别是初始化条件部分的作用范围不同<br>3.开发中，基本上我们都会从for、while中进行选择，实现循环结构</p><h5 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span> + result);<span class="comment">//1 + 2 +3 + ... + 100 = 5050</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);<span class="comment">//101;出了while循环以后，仍可以调用，for循环不可以</span></span><br></pre></td></tr></table></figure><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><h5 id="do-while循环格式"><a href="#do-while循环格式" class="headerlink" title="do-while循环格式"></a>do-while循环格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">③循环体部分</span><br><span class="line">④迭代部分</span><br><span class="line">&#125;<span class="keyword">while</span>(②循环条件部分);</span><br></pre></td></tr></table></figure><p>执行过程：① - ③ - ④ - ② - ③ - ④ - ② - ③ - ④ -… - ②<br>1.do-while循环至少会执行一次循环体<br>2.开发中，使用for和while更多一些，较少使用do-while</p><h5 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(number1 &gt; <span class="number">10</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello:while&quot;</span>);<span class="comment">//不输出</span></span><br><span class="line">    number1--;    </span><br><span class="line"><span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello:do-while&quot;</span>);<span class="comment">//输出一次</span></span><br><span class="line">    number2--;</span><br><span class="line">&#125;<span class="keyword">while</span>(number2 &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="循环结构综合例题"><a href="#循环结构综合例题" class="headerlink" title="循环结构综合例题"></a>循环结构综合例题</h4><p>从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exer7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">positiveNumber</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录正数的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">negativeNumber</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录负数的个数</span></span><br><span class="line">        <span class="keyword">for</span>(;;)&#123; <span class="comment">//while(true)&#123;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">            <span class="comment">//判断number的正负情况</span></span><br><span class="line">            <span class="keyword">if</span>(number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                positiveNumber++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                negativeNumber++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//一旦执行break，跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的正数个数为：&quot;</span> + positiveNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的负数个数为：&quot;</span> + negativeNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最简单“无限” 循环格式：while(true)和for( ; ;)<br>无限循环存在的原因是并不知道循环多少次，需要根据循环体内部某些条件，来控制循环的结束<br>结束循环的方式：一是循环条件部分返回false；二是在循环体中，执行break</p><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><ul><li>将一个循环放在另一个循环体内就形成了嵌套循环，for,while,do…while均可作为外层或内层循环</li><li>实际上嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环</li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次</li><li>外层循环控制行数，内层循环控制列数</li></ul><h5 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h5><p>1.九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">9</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">         System.out.print(i + <span class="string">&quot; * &quot;</span> + j + <span class="string">&quot; = &quot;</span> + (i * j) + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.100000以内的所有质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录质数的个数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//获取当前时间距离1970-01-01 00:00:00 的毫秒数</span></span><br><span class="line">label:<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历100000以内的自然数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;<span class="comment">//j:被i去除；sqrt优化二</span></span><br><span class="line">        <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">            <span class="keyword">continue</span> label;<span class="comment">//优化一</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//能执行到此步骤的，都是质数</span></span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//获取当前时间距离1970-01-01 00:00:00 的毫秒数</span></span><br><span class="line">System.out.println(<span class="string">&quot;质数的个数为：&quot;</span> + count);</span><br><span class="line">System.out.println(<span class="string">&quot;所花费的时间为：&quot;</span> + (end - start));</span><br><span class="line"><span class="comment">//未优化：17110 - 优化一：continue:1546 - 优化二：13</span></span><br></pre></td></tr></table></figure><p>“1”既不是质数，也不是合数。因为如果一个数不是质数是合数，那么一定可以由两个自然数相乘得到，其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现，所以只用计算到该数的平方根以下看除了1有没有该数的因数，若没有，则是质数。</p><h4 id="关键字break和continue的使用"><a href="#关键字break和continue的使用" class="headerlink" title="关键字break和continue的使用"></a>关键字break和continue的使用</h4><ul><li>break只能用于switch语句和循环语句中</li><li>continue 只能用于循环语句中</li><li>二者功能类似，但continue是终止本次循环，break是终止本层循环</li><li>break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句</li><li>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面</li><li>很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但容易使程序出错。Java中的break和continue是不同于goto的</li></ul><p><img data-src="https://img.susin3x.cn/images/202204121502329.svg" alt="break和continue"></p><ul><li>break用法举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;= <span class="number">10</span>; i++)&#123; </span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;今晚迪丽热巴要约我！！！&quot;);//关键字后面不能声明执行语句</span></span><br><span class="line">   &#125;</span><br><span class="line">   System.out.print(i);<span class="comment">//12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>continue用法举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;= <span class="number">10</span>; i++)&#123; </span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.print(i);<span class="comment">//12457810</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>label标签的使用<br>break，continue语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">label:<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//break;//默认跳出包裹此关键字最近的一层循环。</span></span><br><span class="line">            <span class="comment">//continue;</span></span><br><span class="line">            <span class="comment">//break label;//结束指定标识的一层循环结构//123</span></span><br><span class="line">            <span class="keyword">continue</span> label;<span class="comment">//结束指定标识的一层循环结构当次循环//123123123123</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(j);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>return用法<br>return并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束。与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内。</li></ul>]]></content>
    
    
    <summary type="html">主要学习了分支结构和循环结构，对break和continue关键字的使用更清楚了。Scanner类可获取键盘输入的数据，无限循环结构while(true)和for( ; ;)能用break和设置Flag结束循环。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day03</title>
    <link href="https://susin3x.cn/posts/30d07a4c.html"/>
    <id>https://susin3x.cn/posts/30d07a4c.html</id>
    <published>2022-01-30T12:19:50.000Z</published>
    <updated>2023-05-14T03:11:00.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>编程中经常涉及的进制及表示方式</p><ul><li>二进制（binary）：0,1 满2进1，以0b或0B开头</li><li>十进制（decimal）：0-9 满10进1</li><li>八进制（octal）：0-7 满8进1 以数字0开头</li><li>十六进制（hex）：0-9及A-F 满16进1 以0x或0X开头</li></ul><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>所有数字在计算机底层都以二进制形式存在。在计算机中参与运算的机器数有两大类：无符号数和有符号数，有符号数的机器表示有原码、反码、补码和移码。</p><ul><li>原码：直接将一个数值换成二进制数，最高位是符号位</li><li>反码：符号位为0则反码与原码相同，符号位为1则数值位全部取反</li><li>补码：符号位为0则补码与原码相同，符号位为1则数值位全部取反，末位加1</li></ul><p>计算机底层都以补码的形式存储数据。</p><ul><li>负数[x]原转[x]补：从右往左找到第一个1，除符号位之外，这个1左边的所有位全部取反</li><li>[x]补转[-x]补：从右往左找到第一个1，这个1左边的所有位全部取反<br>[-127]补 = 1000 0001   [-128]补 = 1000 0000</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</p><h3 id="算术运算符（-，-，-，-，-，前-，后-，前–，后–，连接-）"><a href="#算术运算符（-，-，-，-，-，前-，后-，前–，后–，连接-）" class="headerlink" title="算术运算符（+，-，*，/，%，前++，后++，前–，后–，连接+）"></a>算术运算符（+，-，*，/，%，前++，后++，前–，后–，连接+）</h3><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+3</td><td align="center">3</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">b=4;-b</td><td align="center">-4</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">5+5</td><td align="center">10</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">6-4</td><td align="center">2</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">3*4</td><td align="center">12</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">5/5</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取模(取余)</td><td align="center">7%5</td><td align="center">2</td></tr><tr><td align="center">++<br />++</td><td align="center">自增(前)：先运算后取值<br />自增(后)：先取值后运算</td><td align="center">a=2;b=++a;<br />a=2;b=a++;</td><td align="center">a=3;b=3<br />a=3;b=2;</td></tr><tr><td align="center">- -<br />- -</td><td align="center">自减(前)：先运算后取值<br />自减(后)：先取值后运算</td><td align="center">a=2;b=- -a;<br />a=2;b=a- -;</td><td align="center">a=1;b=1<br />a=1;b=2;</td></tr><tr><td align="center">+</td><td align="center">字符串连接</td><td align="center">“He” + “llo”</td><td align="center">“Hello”</td></tr></tbody></table><ul><li>除号的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 / num2 * num2;</span><br><span class="line">System.out.println(result);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>取模结果的符号与被模数的符号相同，取模运算的结果不一定总是整数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> -<span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;m1 % n1 = &quot;</span> + m1 % n1);<span class="comment">//-2</span></span><br><span class="line">System.out.println(<span class="string">&quot;m2 % n2 = &quot;</span> + m2 % n2);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><ul><li>自增自减运算符是在运算结束前（前置自增自减运算符）或后（后置自增自减运算符）将变量的值加（或减）一，相较于+=和-=运算符，自增运算符更简洁，且可控制效果作用于运算前还是之后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i1++;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span>+i);    <span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;i1=&quot;</span>+i1);<span class="comment">//11</span></span><br><span class="line">i = ++i1;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span>+i);    <span class="comment">//12</span></span><br><span class="line">System.out.println(<span class="string">&quot;i1=&quot;</span>+i1);<span class="comment">//12</span></span><br><span class="line">i = i2--;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span>+i);    <span class="comment">//20</span></span><br><span class="line">System.out.println(<span class="string">&quot;i1=&quot;</span>+i1);<span class="comment">//12</span></span><br><span class="line">i = i2--;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span>+i);    <span class="comment">//20</span></span><br><span class="line">System.out.println(<span class="string">&quot;i2=&quot;</span>+i2);<span class="comment">//19</span></span><br><span class="line">i = --i2;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span>+i);    <span class="comment">//18</span></span><br><span class="line">System.out.println(<span class="string">&quot;i2=&quot;</span>+i2);<span class="comment">//18</span></span><br></pre></td></tr></table></figure><ul><li>连接符“+”除字符串相加功能外，还能把非字符串转换成字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;5+5=&quot;</span>+<span class="number">5</span>+<span class="number">5</span>);<span class="comment">//5+5=55</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符（-，-，-，-，-，-）"><a href="#赋值运算符（-，-，-，-，-，-）" class="headerlink" title="赋值运算符（=，+=，-=，*=，/=，%=）"></a>赋值运算符（=，+=，-=，*=，/=，%=）</h3><p>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理</p><ul><li>“=”支持连续赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i1,i2;</span><br><span class="line">i1 = i2 = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>赋值运算符运算的结果不会改变变量本身的数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">s1 = s1 + <span class="number">2</span><span class="comment">//编译失败，常量默认int型，从int转换到short可能会有损失</span></span><br><span class="line">s1 += <span class="number">2</span>;   <span class="comment">//不会改变本身变量的数据类型</span></span><br></pre></td></tr></table></figure><ul><li>开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num = 10;)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = num + <span class="number">2</span>;<span class="comment">//方式一</span></span><br><span class="line">num += <span class="number">2</span>;     <span class="comment">//方式二 (推荐)</span></span><br></pre></td></tr></table></figure><ul><li>开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num = 10;)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = num + <span class="number">1</span>;<span class="comment">//方式一</span></span><br><span class="line">num += <span class="number">1</span>;     <span class="comment">//方式二</span></span><br><span class="line">num++;        <span class="comment">//方式三： (推荐)</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符（-，-，-lt-，-gt-，-lt-，-gt-，instanceof）"><a href="#比较运算符（-，-，-lt-，-gt-，-lt-，-gt-，instanceof）" class="headerlink" title="比较运算符（==，!=，&lt;，&gt;，&lt;=，&gt;=，instanceof）"></a>比较运算符（==，!=，&lt;，&gt;，&lt;=，&gt;=，instanceof）</h3><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">相等于</td><td align="center">4==3</td><td align="center">false</td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">4!=3</td><td align="center">true</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">4&lt;3</td><td align="center">false</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">4&gt;3</td><td align="center">true</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td><td align="center">4&lt;=3</td><td align="center">false</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td><td align="center">4&gt;=3</td><td align="center">true</td></tr><tr><td align="center">instanceof</td><td align="center">检查是否是类的对象</td><td align="center">“Hello”instanceof String</td><td align="center">true</td></tr></tbody></table><ul><li>比较运算符的结果是boolean类型，运算结果要么是true，要么是false</li><li>运算符&gt;，&lt;，&gt;=，&lt;= 只能使用在数值类型（整型和浮点型）的数据之间</li><li>== 和 != 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Account</span> <span class="variable">acct1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="type">Account</span> <span class="variable">acct2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> (acct1 == acct2);   <span class="comment">//false比较两个Account是否是同一个账户。</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> (acct1 != acct2);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>比较运算符“==”不能误写成“=”，注意区分“==”和“=”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(i == j);  <span class="comment">//false</span></span><br><span class="line">System.out.println(i = j);   <span class="comment">//20</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">System.out.println(b2 == b1);<span class="comment">//false</span></span><br><span class="line">System.out.println(b2 = b1); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符-amp-逻辑与，-amp-amp-短路与，-逻辑或，-短路或，逻辑非！，逻辑异或"><a href="#逻辑运算符-amp-逻辑与，-amp-amp-短路与，-逻辑或，-短路或，逻辑非！，逻辑异或" class="headerlink" title="逻辑运算符(&amp;逻辑与，&amp;&amp;短路与，|逻辑或，||短路或，逻辑非！，逻辑异或^)"></a>逻辑运算符(&amp;逻辑与，&amp;&amp;短路与，|逻辑或，||短路或，逻辑非！，逻辑异或^)</h3><p>逻辑运算符操作的都是boolean类型的变量，而且结果也是boolean类型。逻辑异或^ 与逻辑或|的不同之处是：当左右都为true时，结果为false，异或，追求的是“异”!</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">a&amp;b</th><th align="center">a&amp;&amp;b</th><th align="center">a|b</th><th align="center">a||b</th><th align="center">!a</th><th align="center">a^b</th></tr></thead><tbody><tr><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">false</td><td align="center">false</td></tr><tr><td align="center">true</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">true</td><td align="center">false</td><td align="center">true</td></tr><tr><td align="center">false</td><td align="center">true</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">true</td><td align="center">true</td><td align="center">true</td></tr><tr><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">false</td><td align="center">true</td><td align="center">false</td></tr></tbody></table><ul><li>区分 &amp; 与 &amp;&amp;<br>  开发中，推荐使用&amp;&amp;<br>  相同点1：&amp; 与 &amp;&amp; 的运算结果相同<br>  相同点2：当符号左边是true时，二者都会执行符号右边的运算<br>  不同点：当符号左边是false时，&amp;继续执行符号右边的运算， &amp;&amp;不再执行符号右边的运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">b1 = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b1 &amp; (num1++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;num1 = &quot;</span> + num1);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">b2 = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b2 &amp;&amp; (num2++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;num2 = &quot;</span> + num2);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li>区分 | 与 ||<br>  开发中，推荐使用||<br>  相同点1：| 与 || 的运算结果相同<br>  相同点2：当符号左边是false时，二者都会执行符号右边的运算<br>  不同点：当符号左边是true时，|继续执行符号右边的运算， ||不再执行符号右边的运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b3 | (num3++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;num3 = &quot;</span> + num3);<span class="comment">//11</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b4 || (num4++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;num4 = &quot;</span> + num4);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">y</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"><span class="keyword">if</span>((z++ == <span class="number">42</span>) &amp;&amp; (y = <span class="literal">true</span>))z++;   <span class="comment">//z=44</span></span><br><span class="line"><span class="keyword">if</span>((x = <span class="literal">false</span>) || (++z == <span class="number">45</span>))z++;</span><br><span class="line">System.out.println(<span class="string">&quot;z=&quot;</span> + z);       <span class="comment">//z=46</span></span><br></pre></td></tr></table></figure><h3 id="位运算符（-lt-lt-，-gt-gt-，-gt-gt-gt-，-amp-，-，-，-）"><a href="#位运算符（-lt-lt-，-gt-gt-，-gt-gt-gt-，-amp-，-，-，-）" class="headerlink" title="位运算符（&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;，&amp;，|，^，~）"></a>位运算符（&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;，&amp;，|，^，~）</h3><p>位运算是直接对整数的二进制进行的运算</p><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">&lt;&lt;</td><td align="center">左移</td><td align="center">3&lt;&lt;2=12 –&gt;3 * 2 * 2=12</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td><td align="center">3&gt;&gt;1 –&gt;3/2=1</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">无符号左移</td><td align="center">3&gt;&gt;&gt;1=1 –&gt;3/2=1</td></tr><tr><td align="center">&amp;</td><td align="center">与运算</td><td align="center">6&amp;3=2</td></tr><tr><td align="center">|</td><td align="center">或运算</td><td align="center">6|3=7</td></tr><tr><td align="center">^</td><td align="center">异或运算</td><td align="center">6^3=5</td></tr><tr><td align="center">~</td><td align="center">取反运算</td><td align="center">~6=7<br />6(0110)取反得(1001)，(1001)补转原得(1111)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;i &lt;&lt; 2 : &quot;</span>+ (i&lt;&lt;<span class="number">2</span>) );  <span class="comment">//84</span></span><br><span class="line">System.out.println(<span class="string">&quot;i &lt;&lt; 27 : &quot;</span>+ (i&lt;&lt;<span class="number">27</span>) );<span class="comment">//负</span></span><br><span class="line">System.out.println(<span class="string">&quot; m &amp; n :&quot;</span>+(m &amp; n));    <span class="comment">//4</span></span><br><span class="line">System.out.println(<span class="string">&quot; m | n :&quot;</span>+(m | n));    <span class="comment">//13</span></span><br><span class="line">System.out.println(<span class="string">&quot; m ^ n :&quot;</span>+(m ^ n));    <span class="comment">//9</span></span><br></pre></td></tr></table></figure><p>&lt;&lt; ：在一定范围内，每向左移1位，相当于 * 2；&gt;&gt; ：在一定范围内，每向右移1位，相当于 / 2</p><table><thead><tr><th align="center">运算符</th><th align="center">细节</th></tr></thead><tbody><tr><td align="center">&lt;&lt;</td><td align="center">空位补0，被移除的高位丢弃，空缺位补0</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">被移位的二进制最高位是0，右移后，空缺位补0；<br/>最高位是1，空缺位补1</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">被移位二进制最高位无论是0或者是1，空缺位都用0补</td></tr><tr><td align="center">&amp;</td><td align="center">二进制位进行&amp;运算，只有1&amp;1时结果是1，否则是0</td></tr><tr><td align="center">|</td><td align="center">二进制位进行|运算，只有0 | 0时结果是0，否则是1</td></tr><tr><td align="center">^</td><td align="center">相同二进制位进行 ^ 运算，结果是0；1^1=0 , 0^0=0<br/>不相同二进制位 ^ 运算结果是1；1^0=1 , 0^1=1</td></tr><tr><td align="center">~</td><td align="center">正数取反，各二进制码按补码各位取反<br/>负数取反，各二进制码按补码各位取反</td></tr></tbody></table><h4 id="练习一：写出最高效的-2-8-的实现方式"><a href="#练习一：写出最高效的-2-8-的实现方式" class="headerlink" title="练习一：写出最高效的 2 * 8 的实现方式"></a>练习一：写出最高效的 2 * 8 的实现方式</h4><p>答：2 &lt;&lt; 3 或 8 &lt;&lt; 1</p><h4 id="练习二：交换两个变量的值"><a href="#练习二：交换两个变量的值" class="headerlink" title="练习二：交换两个变量的值"></a>练习二：交换两个变量的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//方式一:推荐的方式</span></span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//好处：不用定义临时变量</span></span><br><span class="line"><span class="comment">//坏处：1.相加操作可能超出存储范围 2.有局限性：只能适用于数值类型</span></span><br><span class="line">num1 = num1 + num2;</span><br><span class="line">num2 = num1 - num2;</span><br><span class="line">num1 = num1 - num2;</span><br><span class="line"><span class="comment">//方式三：使用位运算符 m = k ^ n = (m ^ n) ^ n</span></span><br><span class="line"><span class="comment">//有局限性：只能适用于数值类型</span></span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num1 = num1 ^ num2;</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li>三元运算符的格式：(条件表达式) ? 表达式1 : 表达式2，条件表达式的结果为boolean类型</li><li>表达式1和表达式2要求是一致的，三元运算符可以嵌套使用</li><li>根据条件表达式真或假，决定执行表达式1，还是表达式2<br>如果表达式为true，则执行表达式1；如果表达式为false，则执行表达式2</li><li>凡是可以使用三元运算符的地方，都可以改写为if-else，反之不成立</li><li>如果程序既可以使用三元运算符又可以使用if-else结构，那么优先选择三元运算符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取两个数的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">12</span>,n = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (m &gt; n)? m : n;</span><br><span class="line">System.out.println(<span class="string">&quot;两个数的最大值为：&quot;</span> + max);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改写为if-else</span></span><br><span class="line"><span class="keyword">if</span> (m &gt;n)&#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(n);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要学习了进制和运算符，在408中学过原码转补码更快的方法，位运算符是java专有的。要区分=和==，逻辑与&amp;和短路与&amp;&amp;，逻辑或|和短路或||，注意这些运算符在if-else结构中的运用。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day02</title>
    <link href="https://susin3x.cn/posts/47d74ada.html"/>
    <id>https://susin3x.cn/posts/47d74ada.html</id>
    <published>2022-01-29T12:17:24.000Z</published>
    <updated>2023-05-14T03:11:00.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键字（Keyword）和保留字（reserved-word）"><a href="#关键字（Keyword）和保留字（reserved-word）" class="headerlink" title="关键字（Keyword）和保留字（reserved word）"></a>关键字（Keyword）和保留字（reserved word）</h2><p>定义：被java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>特点：关键字中所有字母都为小写</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th>用于定义数据类型的关键字</th></tr></thead><tbody><tr><td>class、interface、enum、byte、short、int、long、float、double、char、boolean、void</td></tr><tr><td><strong>用于定义流程控制的关键字</strong></td></tr><tr><td>if、else、switch、case、default、while、do、for、break、continue、return</td></tr><tr><td><strong>用于定义访问权限修饰符的关键字</strong></td></tr><tr><td>private、protected、public</td></tr><tr><td><strong>用于定义类、函数、变量修饰符的关键字</strong></td></tr><tr><td>abstract、final、static、synchronized</td></tr><tr><td><strong>用于定义类与类之间关系的关键字</strong></td></tr><tr><td>extends、implements</td></tr><tr><td><strong>用于定义建立实例及引用实例，判断实例的关键字</strong></td></tr><tr><td>new、this、super、instanceof</td></tr><tr><td><strong>用于异常处理的关键字</strong></td></tr><tr><td>try、catch、finally、throw、throws</td></tr><tr><td><strong>用于包的关键字</strong></td></tr><tr><td>package、import</td></tr><tr><td><strong>其他修饰符关键字</strong></td></tr><tr><td>native、strictfp、transient、volatile、assert</td></tr><tr><td><strong>用于定义数据类型值的字面值（严格意义上不算关键字，但可当作关键字使用）</strong></td></tr><tr><td>true、false、null</td></tr></tbody></table><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>现有java版本尚未使用，但以后可能会作为关键字使用，命名标识符时要避免使用保留字goto、const</p><h2 id="标识符（Identifier）"><a href="#标识符（Identifier）" class="headerlink" title="标识符（Identifier）"></a>标识符（Identifier）</h2><p>java对各种变量、方法和类等要素命名时使用的字符序列称为标识符</p><ul><li>tips1：凡是自己可以起名字的地方都叫标识符</li><li>tips2：在起名字时，为了提高阅读性，要尽量有意义，做到“见名知意”</li></ul><h3 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h3><ul><li>由26个英文字母大小写，0-9 ，_或 $ 组成</li><li>数字不可以开头，标识符不能包含空格</li><li>Java中严格区分大小写，长度无限制</li><li>不可以使用关键字和保留字，但能包含关键字和保留字</li></ul><h3 id="名称命名规范"><a href="#名称命名规范" class="headerlink" title="名称命名规范"></a>名称命名规范</h3><ul><li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz（大驼峰）</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz（小驼峰）</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul><h2 id="变量（Variable）"><a href="#变量（Variable）" class="headerlink" title="变量（Variable）"></a>变量（Variable）</h2><ul><li>Java定义变量的格式：数据类型 变量名 = 变量值</li><li>Java中每个变量必须先声明，后使用</li><li>变量的作用域在其定义的一对{}内</li><li>变量只有在其作用域内才有效</li><li>同一个作用域内，不能定义重名的变量</li></ul><h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h3><p>按数据类型分类：</p><p><img data-src="https://img.susin3x.cn/images/202204121257698.svg"></p><table><thead><tr><th>整型：byte(1字节=8bit)、short(2字节) 、int(4字节)、long(8字节)</th></tr></thead><tbody><tr><td>① byte范围：-128 ~ 127<br/>② 声明long型变量，必须以”l”或”L”结尾<br/>③ 通常，定义整型变量时，使用int型。<br/>④ 整型的常量，默认类型是：int型</td></tr><tr><td><strong>浮点型：float(4字节)、double(8字节)</strong></td></tr><tr><td>① 浮点型，表示带小数点的数值<br/>② float表示数值的范围比long还大<br/>③ 定义float类型变量时，变量要以”f”或”F”结尾<br/>④ 通常，定义浮点型变量时，使用double型。<br/>⑤ 浮点型的常量，默认类型为：double</td></tr><tr><td><strong>字符型：char (1字符=2字节)</strong></td></tr><tr><td>① 定义char型变量，通常使用一对’’,内部只能写一个字符<br /> ② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量</td></tr><tr><td><strong>布尔型：boolean</strong></td></tr><tr><td>① 只能取两个值之一：true 、 false<br/>② 常常在条件判断、循环结构中使用</td></tr></tbody></table><p>按声明的位置分类：</p><p><img data-src="https://img.susin3x.cn/images/202204121255765.svg"></p><ul><li>在方法体外，类体内声明的变量称为成员变量</li><li>在方法体内部声明的变量称为局部变量</li><li>二者在初始化值方面的异同(同：都有生命周期；异：局部变量除形参外，需显式初始化)</li></ul><h2 id="基本数据类型之间的运算规则"><a href="#基本数据类型之间的运算规则" class="headerlink" title="基本数据类型之间的运算规则"></a>基本数据类型之间的运算规则</h2><p>只讨论7种(byte,short,int,long,float,double,char)基本数据类型变量间的运算，不包含boolean</p><h3 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h3><ul><li>容量小的数据类型的变量与容量大的数据类型的变量做运算，结果自动提升为容量大的数据类型</li><li>byte 、char、short –&gt; int –&gt; long –&gt; float –&gt; double</li><li>当byte、char、short三种类型的变量做运算时，结果为int型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> b1 + b2;  <span class="comment">//编译不通过，从int转换为byte可能会有损失</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> c1 + b1;  <span class="comment">//编译不通过，从int转换为char可能会有损失</span></span><br></pre></td></tr></table></figure><h3 id="强制类型转换（自动类型提升的逆运算）"><a href="#强制类型转换（自动类型提升的逆运算）" class="headerlink" title="强制类型转换（自动类型提升的逆运算）"></a>强制类型转换（自动类型提升的逆运算）</h3><ul><li>需要使用强转符：( )</li><li>强制类型转换，可能导致精度损失</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (<span class="type">int</span>)d1;         <span class="comment">//截断操作</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> (<span class="type">byte</span>)i2;</span><br><span class="line">System.out.println(b1);  <span class="comment">//输出结果-128</span></span><br></pre></td></tr></table></figure><h2 id="String与8种基本数据类型间的运算"><a href="#String与8种基本数据类型间的运算" class="headerlink" title="String与8种基本数据类型间的运算"></a>String与8种基本数据类型间的运算</h2><ul><li>String属于引用数据类型</li><li>声明String类型变量时，使用一对””</li><li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+</li><li>运算的结果仍然是String类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">123</span>;    <span class="comment">//编译不通过：int无法转换为String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)s1;   <span class="comment">//编译不通过：String无法转换为int</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(c + num + str);   <span class="comment">//107hello</span></span><br><span class="line">System.out.println(c + str + num);   <span class="comment">//ahello10</span></span><br><span class="line">System.out.println(c + (num + str)); <span class="comment">//a10hello</span></span><br><span class="line">System.out.println(str + num + c);   <span class="comment">//hello10a</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要学习了java的关键字和数据类型，大部分关键字都用过，标识符不能使用关键字。对标识符的命名规则有了更清楚的了解，python的强制类型转换括号是括变量的，C语言和java是括数据类型。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
  </entry>
  
  <entry>
    <title>javaSE基础学习day01</title>
    <link href="https://susin3x.cn/posts/dede1b60.html"/>
    <id>https://susin3x.cn/posts/dede1b60.html</id>
    <published>2022-01-28T11:09:50.000Z</published>
    <updated>2023-05-14T03:11:00.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的DOS命令</h2><table><thead><tr><th>DOS命令</th></tr></thead><tbody><tr><td>dir（directory，目录）：显示当前目录下的文件及子目录</td></tr><tr><td>md（make directory)：创建目录</td></tr><tr><td>cd（change directory）：进入指定目录</td></tr><tr><td>rd（remove directory）：删除目录；如果目录下有文件，可以先del</td></tr><tr><td>cd..：退回上一级目录</td></tr><tr><td>cd/：退回到根目录</td></tr><tr><td>del：删除文件；del *txt即删除当前目录下所有的txt格式的文件</td></tr></tbody></table><h2 id="java语言的特点"><a href="#java语言的特点" class="headerlink" title="java语言的特点"></a>java语言的特点</h2><p>一、面向对象性</p><ul><li>两个要素：类、对象</li><li>三个特征：封装、继承、多态</li></ul><p>二、健壮性</p><ul><li>去除了C语言的指针</li><li>自动的垃圾回收机制，仍会内存溢出、内存泄漏</li></ul><p>三、跨平台性</p><ul><li>write once,run angwhere(一次编译，到处运行)</li><li>Java语言编写的应用程序在不同系统上皆可运行，归功于JVM</li></ul><p><img data-src="https://img.susin3x.cn/images/202202281758595.jpg" alt="JVM跨平台性"></p><h2 id="java语言的环境搭建"><a href="#java语言的环境搭建" class="headerlink" title="java语言的环境搭建"></a>java语言的环境搭建</h2><h3 id="JDK-JRE-JVM的关系"><a href="#JDK-JRE-JVM的关系" class="headerlink" title="JDK,JRE,JVM的关系"></a>JDK,JRE,JVM的关系</h3><ul><li>JDK（Java Development Kit，Java开发工具包）</li><li>JRE（Java Runtime Environment，Java运行环境）</li><li>JVM（Java Virtual Machine，Java虚拟机）</li></ul><p>JDK = JRE + 开发工具集（如编译工具javac.exe，打包工具jar.exe）<br>JRE = JVM + Java SE标准类库</p><p><img data-src="https://img.susin3x.cn/images/202202281759928.jpg" alt="java平台结构"></p><h3 id="配置环境变量path"><a href="#配置环境变量path" class="headerlink" title="配置环境变量path"></a>配置环境变量path</h3><p>根据windows系统能查找可执行程序的原理，可以将java工具所在路径定义到path环境变量中并让系统去找可执行程序。配置方法如下：</p><ol><li>我的电脑–属性–高级系统设置–环境变量</li><li>新建一项系统变量“JAVA_HOME”,值为 jdk 的安装路径</li><li>双击系统变量的path，在变量值最前端添加“%JAVA_HOME%\bin;”</li></ol><h2 id="开发体验-——-HelloWorld"><a href="#开发体验-——-HelloWorld" class="headerlink" title="开发体验 —— HelloWorld"></a>开发体验 —— HelloWorld</h2><ol><li>编写：将编写的java代码保存在源文件（.java）中；</li><li>编译：使用javac.exe命令编译java源文件；格式：javac 源文件名.java</li><li>运行：使用java.exe命令解释运行字节码文件（.class）；格式：java 类名</li></ol><p><img data-src="https://img.susin3x.cn/images/202202281759431.jpg" alt="java编译运行过程"></p><h3 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java源文件以“java”为扩展名，源文件的基本组成部分是类(class)，如上HelloWorld类</li><li>Java应用程序的执行入口是main()方法。它有固定的书写格式：<br>public static void main(String[] args)  {…}</li><li>Java语言严格区分大小写，每个语句以“;”结束</li><li>大括号都是成对出现的，缺一不可</li><li>一个源文件中最多只能有一个public类。其它类的个数不限</li><li>如果源文件包含一个public类，则文件名必须按该类名命名</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>java规范的三种注释方式</p><ul><li>单行注释：//</li><li>多行注释：/*     */</li><li>文档注释（Java特有的）：/**     */</li></ul><p>单行注释和多行注释的注释内容不参与编译，编译以后生成的.class的字节码文件中不包含注释掉的信息<br>文档注释的注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式的程序说明文档</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>结合\n(换行)，\t(制表符)，空格等在控制台打印出如下图所示的效果</p><p><img data-src="https://img.susin3x.cn/images/202202281759671.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrintHeart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t&quot;</span> + <span class="string">&quot;I love Java&quot;</span> + <span class="string">&quot;\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\t\t\t\t\t\t\t&quot;</span> + <span class="string">&quot;*&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">主要学习了java语言的特点和环境搭建，种草了截图工具Snipaste和印象笔记，有些有用的帖子就不用存chrome标签了。第一天就学了Sysout，做了个输出“心”的小作业(๑•̀ㅂ•́)و✧。</summary>
    
    
    
    <category term="javaSE" scheme="https://susin3x.cn/categories/javaSE/"/>
    
    
    <category term="javaSE" scheme="https://susin3x.cn/tags/javaSE/"/>
    
  </entry>
  
</feed>
